<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>每日日寄</title>
      <link href="/2024/07/28/meiririji/"/>
      <url>/2024/07/28/meiririji/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我倏忽间似乎记得了什么东西，在记忆中我曾经喜欢过某些人，为了他们而努力过，但是我都忘了，忘了曾经他们是如此美丽，忘了我曾经是怎么为了他们而奔跑过，忘了那些我曾经知道的事情，我翻开日记，看着那些懵懂的言语，企图找回一点过去的影子，但是我找不到，也想不起那天的光景了。</p><p>于是我发现，我不能再这么下去了。</p></blockquote><p>现在是北京时间2024-07-28 0:57:42，距离研究生考试还有145天23时2分18秒。</p><p><a href="http://www.riqicha.com/kaoyan.html">考研倒计时-距离考研还有多少天-倒计时器 (riqicha.com)</a></p><h3 id="2024-07-28"><a href="#2024-07-28" class="headerlink" title="2024-07-28"></a>2024-07-28</h3><p>5h47min</p><p>嵌入式软件设计一轮完成，刷了67道题</p><p><img src="/../media/assets/1906693397-1722191204323-3.jpg" alt="1906693397"><img src="D:\Blog\source\media\assets\1906693397.jpg" alt="1906693397"></p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cpp Learning Notes</title>
      <link href="/2024/04/04/cpp-learning-notes/"/>
      <url>/2024/04/04/cpp-learning-notes/</url>
      
        <content type="html"><![CDATA[<h1 id="C-核心编程"><a href="#C-核心编程" class="headerlink" title="C++核心编程"></a>C++核心编程</h1><p>本阶段主要针对C++&#x3D;&#x3D;面向对象&#x3D;&#x3D;编程技术做详细讲解，探讨C++中的核心和精髓。</p><h2 id="1-内存分区模型"><a href="#1-内存分区模型" class="headerlink" title="1 内存分区模型"></a>1 内存分区模型</h2><p>C++程序在执行时，将内存大方向划分为<strong>4个区域</strong></p><ul><li>代码区：存放函数体的二进制代码，由操作系统进行管理的</li><li>全局区：存放全局变量和静态变量以及常量</li><li>栈区：由编译器自动分配释放, 存放函数的参数值,局部变量等</li><li>堆区：由程序员分配和释放,若程序员不释放,程序结束时由操作系统回收</li></ul><p>的风格</p><p><strong>内存四区意义：</strong></p><p>不同区域存放的数据，赋予不同的生命周期, 给我们更大的灵活编程</p><h3 id="1-1-程序运行前"><a href="#1-1-程序运行前" class="headerlink" title="1.1 程序运行前"></a>1.1 程序运行前</h3><p>​在程序编译后，生成了exe可执行程序，<strong>未执行该程序前</strong>分为两个区域</p><p>​<strong>代码区：</strong></p><p>​存放 CPU 执行的机器指令</p><p>​代码区是<strong>共享</strong>的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可</p><p>​代码区是<strong>只读</strong>的，使其只读的原因是防止程序意外地修改了它的指令</p><p>​<strong>全局区：</strong></p><p>​全局变量和静态变量存放在此.</p><p>​全局区还包含了常量区, 字符串常量和其他常量也存放在此.</p><p>​&#x3D;&#x3D;该区域的数据在程序结束后由操作系统释放&#x3D;&#x3D;.</p><p><strong>示例：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//全局变量</span><span class="token keyword">int</span> g_a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> g_b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//全局常量</span><span class="token keyword">const</span> <span class="token keyword">int</span> c_g_a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> c_g_b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//局部变量</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//打印地址</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"局部变量a地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"局部变量b地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"全局变量g_a地址为： "</span> <span class="token operator">&lt;&lt;</span>  <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>g_a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"全局变量g_b地址为： "</span> <span class="token operator">&lt;&lt;</span>  <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>g_b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//静态变量</span><span class="token keyword">static</span> <span class="token keyword">int</span> s_a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> s_b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"静态变量s_a地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>s_a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"静态变量s_b地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>s_b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"字符串常量地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token string">"hello world"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"字符串常量地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token string">"hello world1"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"全局常量c_g_a地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>c_g_a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"全局常量c_g_b地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>c_g_b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> c_l_a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> c_l_b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"局部常量c_l_a地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>c_l_a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"局部常量c_l_b地址为： "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>c_l_b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印结果：</p><p><img src="D:\Blog\source_posts\assets\1544585129038.png" alt="1545017602518"></p><p>总结：</p><ul><li>C++中在程序运行前分为全局区和代码区</li><li>代码区特点是共享和只读</li><li>全局区中存放全局变量、静态变量、常量</li><li>常量区中存放 const修饰的全局常量  和 字符串常量</li><li>const比较特殊，作为全局常量的时候放在常量区，作为局部变量的时候放在栈区</li></ul><h3 id="1-2-程序运行后"><a href="#1-2-程序运行后" class="headerlink" title="1.2 程序运行后"></a>1.2 程序运行后</h3><p>​<strong>栈区：</strong></p><p>​由编译器自动分配释放, 存放函数的参数值,局部变量等</p><p>​注意事项：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放</p><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int * func()&#123;int a &#x3D; 10;return &a;&#125;int main() &#123;int *p &#x3D; func();cout &lt;&lt; *p &lt;&lt; endl;cout &lt;&lt; *p &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​<strong>堆区：</strong></p><p>​由程序员分配释放,若程序员不释放,程序结束时由操作系统回收</p><p>​在C++中主要利用new在堆区开辟内存</p><p><strong>示例：</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int* func()&#123;int* a &#x3D; new int(10);return a;&#125;int main() &#123;int *p &#x3D; func();cout &lt;&lt; *p &lt;&lt; endl;cout &lt;&lt; *p &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong></p><p>堆区数据由程序员管理开辟和释放</p><p>堆区数据利用new关键字进行开辟内存</p><h3 id="1-3-new操作符"><a href="#1-3-new操作符" class="headerlink" title="1.3 new操作符"></a>1.3 new操作符</h3><p>​C++中利用&#x3D;&#x3D;new&#x3D;&#x3D;操作符在堆区开辟数据</p><p>​堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符 &#x3D;&#x3D;delete&#x3D;&#x3D;</p><p>​语法：<code> new 数据类型</code></p><p>​利用new创建的数据，会返回该数据对应的类型的指针</p><p><strong>示例1： 基本语法</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int* func()&#123;int* a &#x3D; new int(10);return a;&#125;int main() &#123;int *p &#x3D; func();cout &lt;&lt; *p &lt;&lt; endl;cout &lt;&lt; *p &lt;&lt; endl;&#x2F;&#x2F;利用delete释放堆区数据delete p;&#x2F;&#x2F;cout &lt;&lt; *p &lt;&lt; endl; &#x2F;&#x2F;报错，释放的空间不可访问system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例2：开辟数组</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;堆区开辟数组int main() &#123;int* arr &#x3D; new int[10];for (int i &#x3D; 0; i &lt; 10; i++)&#123;arr[i] &#x3D; i + 100;&#125;for (int i &#x3D; 0; i &lt; 10; i++)&#123;cout &lt;&lt; arr[i] &lt;&lt; endl;&#125;&#x2F;&#x2F;释放数组 delete 后加 []delete[] arr;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-引用"><a href="#2-引用" class="headerlink" title="2 引用"></a>2 引用</h2><h3 id="2-1-引用的基本使用"><a href="#2-1-引用的基本使用" class="headerlink" title="2.1 引用的基本使用"></a>2.1 引用的基本使用</h3><p>**作用： **给变量起别名</p><p><strong>语法：</strong> <code>数据类型 &amp;别名 = 原名</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;int a &#x3D; 10;int &amp;b &#x3D; a;cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; &quot;b &#x3D; &quot; &lt;&lt; b &lt;&lt; endl;b &#x3D; 100;cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; &quot;b &#x3D; &quot; &lt;&lt; b &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-引用注意事项"><a href="#2-2-引用注意事项" class="headerlink" title="2.2 引用注意事项"></a>2.2 引用注意事项</h3><ul><li>引用必须初始化</li><li>引用在初始化后，不可以改变</li></ul><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main() &#123;int a &#x3D; 10;int b &#x3D; 20;&#x2F;&#x2F;int &c; &#x2F;&#x2F;错误，引用必须初始化int &amp;c &#x3D; a; &#x2F;&#x2F;一旦初始化后，就不可以更改c &#x3D; b; &#x2F;&#x2F;这是赋值操作，不是更改引用cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; &quot;b &#x3D; &quot; &lt;&lt; b &lt;&lt; endl;cout &lt;&lt; &quot;c &#x3D; &quot; &lt;&lt; c &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-引用做函数参数"><a href="#2-3-引用做函数参数" class="headerlink" title="2.3 引用做函数参数"></a>2.3 引用做函数参数</h3><p><strong>作用：</strong>函数传参时，可以利用引用的技术让形参修饰实参</p><p><strong>优点：</strong>可以简化指针修改实参</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;1. 值传递void mySwap01(int a, int b) &#123;int temp &#x3D; a;a &#x3D; b;b &#x3D; temp;&#125;&#x2F;&#x2F;2. 地址传递void mySwap02(int* a, int* b) &#123;int temp &#x3D; *a;*a &#x3D; *b;*b &#x3D; temp;&#125;&#x2F;&#x2F;3. 引用传递void mySwap03(int&amp; a, int&amp; b) &#123;int temp &#x3D; a;a &#x3D; b;b &#x3D; temp;&#125;int main() &#123;int a &#x3D; 10;int b &#x3D; 20;mySwap01(a, b);cout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; &quot; b:&quot; &lt;&lt; b &lt;&lt; endl;mySwap02(&amp;a, &amp;b);cout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; &quot; b:&quot; &lt;&lt; b &lt;&lt; endl;mySwap03(a, b);cout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; &quot; b:&quot; &lt;&lt; b &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：通过引用参数产生的效果同按地址传递是一样的。引用的语法更清楚简单</p></blockquote><h3 id="2-4-引用做函数返回值"><a href="#2-4-引用做函数返回值" class="headerlink" title="2.4 引用做函数返回值"></a>2.4 引用做函数返回值</h3><p>作用：引用是可以作为函数的返回值存在的</p><p>注意：<strong>不要返回局部变量引用</strong></p><p>用法：函数调用作为左值</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;返回局部变量引用int&amp; test01() &#123;int a &#x3D; 10; &#x2F;&#x2F;局部变量return a;&#125;&#x2F;&#x2F;返回静态变量引用int&amp; test02() &#123;static int a &#x3D; 20;return a;&#125;int main() &#123;&#x2F;&#x2F;不能返回局部变量的引用int&amp; ref &#x3D; test01();cout &lt;&lt; &quot;ref &#x3D; &quot; &lt;&lt; ref &lt;&lt; endl;cout &lt;&lt; &quot;ref &#x3D; &quot; &lt;&lt; ref &lt;&lt; endl;&#x2F;&#x2F;如果函数做左值，那么必须返回引用    int&amp; ref2 &#x3D; test02();cout &lt;&lt; &quot;ref2 &#x3D; &quot; &lt;&lt; ref2 &lt;&lt; endl;cout &lt;&lt; &quot;ref2 &#x3D; &quot; &lt;&lt; ref2 &lt;&lt; endl;test02() &#x3D; 1000;cout &lt;&lt; &quot;ref2 &#x3D; &quot; &lt;&lt; ref2 &lt;&lt; endl;cout &lt;&lt; &quot;ref2 &#x3D; &quot; &lt;&lt; ref2 &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-引用的本质"><a href="#2-5-引用的本质" class="headerlink" title="2.5 引用的本质"></a>2.5 引用的本质</h3><p>本质：<strong>引用的本质在c++内部实现是一个指针常量.</strong></p><p>讲解示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;发现是引用，转换为 int* const ref &#x3D; &a;void func(int&amp; ref)&#123;ref &#x3D; 100; &#x2F;&#x2F; ref是引用，转换为*ref &#x3D; 100&#125;int main()&#123;int a &#x3D; 10;int&amp; ref &#x3D; a;     &#x2F;&#x2F;自动转换为 int* const ref &#x3D; &a; 指针常量是指针指向不可改，也说明为什么引用不可更改ref &#x3D; 20; &#x2F;&#x2F;内部发现ref是引用，自动帮我们转换为: *ref &#x3D; 20;    cout &lt;&lt; &quot;a:&quot; &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; &quot;ref:&quot; &lt;&lt; ref &lt;&lt; endl;    func(a);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结论：C++推荐用引用技术，因为语法方便，引用本质是指针常量，但是所有的指针操作编译器都帮我们做了</p><h3 id="2-6-常量引用"><a href="#2-6-常量引用" class="headerlink" title="2.6 常量引用"></a>2.6 常量引用</h3><p><strong>作用：</strong>常量引用主要用来修饰形参，防止误操作</p><p>在函数形参列表中，可以加&#x3D;&#x3D;const修饰形参&#x3D;&#x3D;，防止形参改变实参</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;引用使用的场景，通常用来修饰形参void showValue(const int&amp; v) &#123;&#x2F;&#x2F;v +&#x3D; 10;cout &lt;&lt; v &lt;&lt; endl;&#125;int main() &#123;&#x2F;&#x2F;int&amp; ref &#x3D; 10;  引用本身需要一个合法的内存空间，因此这行错误&#x2F;&#x2F;加入const就可以了，编译器优化代码，int temp &#x3D; 10; const int&amp; ref &#x3D; temp;const int&amp; ref &#x3D; 10;&#x2F;&#x2F;ref &#x3D; 100;  &#x2F;&#x2F;加入const后不可以修改变量cout &lt;&lt; ref &lt;&lt; endl;&#x2F;&#x2F;函数中利用常量引用防止误操作修改实参int a &#x3D; 10;showValue(a);system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-函数提高"><a href="#3-函数提高" class="headerlink" title="3 函数提高"></a>3 函数提高</h2><h3 id="3-1-函数默认参数"><a href="#3-1-函数默认参数" class="headerlink" title="3.1 函数默认参数"></a>3.1 函数默认参数</h3><p>在C++中，函数的形参列表中的形参是可以有默认值的。</p><p>语法：<code> 返回值类型  函数名 （参数= 默认值）&#123;&#125;</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int func(int a, int b &#x3D; 10, int c &#x3D; 10) &#123;return a + b + c;&#125;&#x2F;&#x2F;1. 如果某个位置参数有默认值，那么从这个位置往后，从左向右，必须都要有默认值&#x2F;&#x2F;2. 如果函数声明有默认值，函数实现的时候就不能有默认参数int func2(int a &#x3D; 10, int b &#x3D; 10);&#x2F;&#x2F;说明赋值核心在声明阶段，不在定义阶段int func2(int a, int b) &#123;return a + b;&#125;int main() &#123;cout &lt;&lt; &quot;ret &#x3D; &quot; &lt;&lt; func(20, 20) &lt;&lt; endl;&#x2F;&#x2F;原先有就用原先的默认值，没有就把值赋值过去cout &lt;&lt; &quot;ret &#x3D; &quot; &lt;&lt; func(100) &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-函数占位参数"><a href="#3-2-函数占位参数" class="headerlink" title="3.2 函数占位参数"></a>3.2 函数占位参数</h3><p>C++中函数的形参列表里可以有占位参数，用来做占位，调用函数时必须填补该位置</p><p><strong>语法：</strong> <code>返回值类型 函数名 (数据类型)&#123;&#125;</code></p><p>在现阶段函数的占位参数存在意义不大，但是后面的课程中会用到该技术</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;函数占位参数 ，占位参数也可以有默认参数void func(int a, int) &#123;cout &lt;&lt; &quot;this is func&quot; &lt;&lt; endl;&#125;int main() &#123;func(10,10); &#x2F;&#x2F;占位参数必须填补system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-函数重载"><a href="#3-3-函数重载" class="headerlink" title="3.3 函数重载"></a>3.3 函数重载</h3><h4 id="3-3-1-函数重载概述"><a href="#3-3-1-函数重载概述" class="headerlink" title="3.3.1 函数重载概述"></a>3.3.1 函数重载概述</h4><p><strong>作用：</strong>函数名可以相同，提高复用性</p><p><strong>函数重载满足条件：</strong></p><ul><li>同一个作用域下</li><li>函数名称相同</li><li>函数参数<strong>类型不同</strong>  或者 <strong>个数不同</strong> 或者 <strong>顺序不同</strong></li></ul><p><strong>注意:</strong>  函数的返回值不可以作为函数重载的条件</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;函数重载需要函数都在同一个作用域下void func()&#123;cout &lt;&lt; &quot;func 的调用！&quot; &lt;&lt; endl;&#125;void func(int a)&#123;cout &lt;&lt; &quot;func (int a) 的调用！&quot; &lt;&lt; endl;&#125;void func(double a)&#123;cout &lt;&lt; &quot;func (double a)的调用！&quot; &lt;&lt; endl;&#125;void func(int a ,double b)&#123;cout &lt;&lt; &quot;func (int a ,double b) 的调用！&quot; &lt;&lt; endl;&#125;void func(double a ,int b)&#123;cout &lt;&lt; &quot;func (double a ,int b)的调用！&quot; &lt;&lt; endl;&#125;&#x2F;&#x2F;函数返回值不可以作为函数重载条件&#x2F;&#x2F;int func(double a, int b)&#x2F;&#x2F;&#123;&#x2F;&#x2F;cout &lt;&lt; &quot;func (double a ,int b)的调用！&quot; &lt;&lt; endl;&#x2F;&#x2F;&#125;int main() &#123;func();func(10);func(3.14);func(10,3.14);func(3.14 , 10);system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-2-函数重载注意事项"><a href="#3-3-2-函数重载注意事项" class="headerlink" title="3.3.2 函数重载注意事项"></a>3.3.2 函数重载注意事项</h4><ul><li>引用作为重载条件</li><li>函数重载碰到函数默认参数</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;函数重载注意事项&#x2F;&#x2F;1、引用作为重载条件void func(int &amp;a)&#123;cout &lt;&lt; &quot;func (int &amp;a) 调用 &quot; &lt;&lt; endl;&#125;void func(const int &amp;a)&#123;cout &lt;&lt; &quot;func (const int &amp;a) 调用 &quot; &lt;&lt; endl;&#125;&#x2F;&#x2F;2、函数重载碰到函数默认参数void func2(int a, int b &#x3D; 10)&#123;cout &lt;&lt; &quot;func2(int a, int b &#x3D; 10) 调用&quot; &lt;&lt; endl;&#125;void func2(int a)&#123;cout &lt;&lt; &quot;func2(int a) 调用&quot; &lt;&lt; endl;&#125;int main() &#123;int a &#x3D; 10;func(a); &#x2F;&#x2F;调用无constfunc(10);&#x2F;&#x2F;调用有const    &#x2F;&#x2F;这里假如改为a，调用的也func (int &amp;a) 调用那么函数重载时相同功能的函数，系统选择调用的优先级是？？？？&#x2F;&#x2F;func2(10); &#x2F;&#x2F;碰到默认参数产生歧义，需要避免system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-类和对象"><a href="#4-类和对象" class="headerlink" title="4 类和对象"></a><strong>4</strong> 类和对象</h2><p>C++面向对象的三大特性为：&#x3D;&#x3D;封装、继承、多态&#x3D;&#x3D;</p><p>C++认为&#x3D;&#x3D;万事万物都皆为对象&#x3D;&#x3D;，对象上有其属性和行为</p><p><strong>例如：</strong></p><p>​人可以作为对象，属性有姓名、年龄、身高、体重…，行为有走、跑、跳、吃饭、唱歌…</p><p>​车也可以作为对象，属性有轮胎、方向盘、车灯…,行为有载人、放音乐、放空调…</p><p>​具有相同性质的&#x3D;&#x3D;对象&#x3D;&#x3D;，我们可以抽象称为&#x3D;&#x3D;类&#x3D;&#x3D;，人属于人类，车属于车类</p><h3 id="4-1-封装"><a href="#4-1-封装" class="headerlink" title="4.1 封装"></a>4.1 封装</h3><h4 id="4-1-1-封装的意义"><a href="#4-1-1-封装的意义" class="headerlink" title="4.1.1  封装的意义"></a>4.1.1  封装的意义</h4><p>封装是C++面向对象三大特性之一</p><p>封装的意义：</p><ul><li>将属性和行为作为一个整体，表现生活中的事物</li><li>将属性和行为加以权限控制</li></ul><p><strong>封装意义一：</strong></p><p>​在设计类的时候，属性和行为写在一起，表现事物</p><p><strong>语法：</strong> <code>class 类名&#123;   访问权限： 属性  / 行为  &#125;;</code></p><p><strong>示例1：</strong>设计一个圆类，求圆的周长</p><p><strong>示例代码：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;圆周率const double PI &#x3D; 3.14;&#x2F;&#x2F;1、封装的意义&#x2F;&#x2F;将属性和行为作为一个整体，用来表现生活中的事物&#x2F;&#x2F;封装一个圆类，求圆的周长&#x2F;&#x2F;class代表设计一个类，后面跟着的是类名class Circle&#123;public:  &#x2F;&#x2F;访问权限  公共的权限&#x2F;&#x2F;属性int m_r;&#x2F;&#x2F;半径&#x2F;&#x2F;行为&#x2F;&#x2F;获取到圆的周长double calculateZC()&#123;&#x2F;&#x2F;2 * pi  * r&#x2F;&#x2F;获取圆的周长return  2 * PI * m_r;&#125;&#125;;int main() &#123;&#x2F;&#x2F;通过圆类，创建圆的对象&#x2F;&#x2F; c1就是一个具体的圆Circle c1;c1.m_r &#x3D; 10; &#x2F;&#x2F;给圆对象的半径 进行赋值操作&#x2F;&#x2F;2 * pi * 10 &#x3D; &#x3D; 62.8cout &lt;&lt; &quot;圆的周长为： &quot; &lt;&lt; c1.calculateZC() &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例2：</strong>设计一个学生类，属性有姓名和学号，可以给姓名和学号赋值，可以显示学生的姓名和学号</p><p><strong>示例2代码：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;学生类class Student &#123;public:void setName(string name) &#123;m_name &#x3D; name;&#125;void setID(int id) &#123;m_id &#x3D; id;&#125;void showStudent() &#123;cout &lt;&lt; &quot;name:&quot; &lt;&lt; m_name &lt;&lt; &quot; ID:&quot; &lt;&lt; m_id &lt;&lt; endl;&#125;public:string m_name;int m_id;&#125;;int main() &#123;Student stu;stu.setName(&quot;德玛西亚&quot;);stu.setID(250);stu.showStudent();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>封装意义二：</strong></p><p>类在设计时，可以把属性和行为放在不同的权限下，加以控制</p><p>访问权限有三种：</p><ol><li>public        公共权限  </li><li>protected 保护权限</li><li>private      私有权限</li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;三种权限&#x2F;&#x2F;公共权限  public     类内可以访问  类外可以访问&#x2F;&#x2F;保护权限  protected  类内可以访问  类外不可以访问&#x2F;&#x2F;私有权限  private    类内可以访问  类外不可以访问class Person&#123;&#x2F;&#x2F;姓名  公共权限public:string m_Name;&#x2F;&#x2F;汽车  保护权限protected:string m_Car;&#x2F;&#x2F;银行卡密码  私有权限private:int m_Password;public:void func()&#123;m_Name &#x3D; &quot;张三&quot;;m_Car &#x3D; &quot;拖拉机&quot;;m_Password &#x3D; 123456;&#125;&#125;;int main() &#123;Person p;p.m_Name &#x3D; &quot;李四&quot;;&#x2F;&#x2F;p.m_Car &#x3D; &quot;奔驰&quot;;  &#x2F;&#x2F;保护权限类外访问不到&#x2F;&#x2F;p.m_Password &#x3D; 123; &#x2F;&#x2F;私有权限类外访问不到system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-2-struct和class区别"><a href="#4-1-2-struct和class区别" class="headerlink" title="4.1.2 struct和class区别"></a>4.1.2 struct和class区别</h4><p>在C++中 struct和class唯一的<strong>区别</strong>就在于 <strong>默认的访问权限不同</strong></p><p>区别：</p><ul><li>struct 默认权限为公共</li><li>class   默认权限为私有</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class C1&#123;int  m_A; &#x2F;&#x2F;默认是私有权限&#125;;struct C2&#123;int m_A;  &#x2F;&#x2F;默认是公共权限&#125;;int main() &#123;C1 c1;c1.m_A &#x3D; 10; &#x2F;&#x2F;错误，访问权限是私有C2 c2;c2.m_A &#x3D; 10; &#x2F;&#x2F;正确，访问权限是公共system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-3-成员属性设置为私有"><a href="#4-1-3-成员属性设置为私有" class="headerlink" title="4.1.3 成员属性设置为私有"></a>4.1.3 成员属性设置为私有</h4><p><strong>优点1：</strong>将所有成员属性设置为私有，可以自己控制读写权限</p><p><strong>优点2：</strong>对于写权限，我们可以检测数据的有效性</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person &#123;public:&#x2F;&#x2F;姓名设置可读可写void setName(string name) &#123;m_Name &#x3D; name;&#125;string getName()&#123;return m_Name;&#125;&#x2F;&#x2F;获取年龄 int getAge() &#123;return m_Age;&#125;&#x2F;&#x2F;设置年龄void setAge(int age) &#123;if (age &lt; 0 || age &gt; 150) &#123;cout &lt;&lt; &quot;你个老妖精!&quot; &lt;&lt; endl;return;&#125;m_Age &#x3D; age;&#125;&#x2F;&#x2F;情人设置为只写void setLover(string lover) &#123;m_Lover &#x3D; lover;&#125;private:string m_Name; &#x2F;&#x2F;可读可写  姓名int m_Age; &#x2F;&#x2F;只读  年龄string m_Lover; &#x2F;&#x2F;只写  情人&#125;;int main() &#123;Person p;&#x2F;&#x2F;姓名设置p.setName(&quot;张三&quot;);cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; p.getName() &lt;&lt; endl;&#x2F;&#x2F;年龄设置p.setAge(50);cout &lt;&lt; &quot;年龄： &quot; &lt;&lt; p.getAge() &lt;&lt; endl;&#x2F;&#x2F;情人设置p.setLover(&quot;苍井&quot;);&#x2F;&#x2F;cout &lt;&lt; &quot;情人： &quot; &lt;&lt; p.m_Lover &lt;&lt; endl;  &#x2F;&#x2F;只写属性，不可以读取system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>练习案例1：设计立方体类</strong></p><p>设计立方体类(Cube)</p><p>求出立方体的面积和体积</p><p>分别用全局函数和成员函数判断两个立方体是否相等。</p><p><img src="/assets/1545533548532.png" alt="1545533548532"></p><p><strong>练习案例2：点和圆的关系</strong></p><p>设计一个圆形类（Circle），和一个点类（Point），计算点和圆的关系。</p><p><img src="/assets/1545533829184.png" alt="1545533829184"></p><h3 id="4-2-对象的初始化和清理"><a href="#4-2-对象的初始化和清理" class="headerlink" title="4.2 对象的初始化和清理"></a>4.2 对象的初始化和清理</h3><ul><li>生活中我们买的电子产品都基本会有出厂设置，在某一天我们不用时候也会删除一些自己信息数据保证安全</li><li>C++中的面向对象来源于生活，每个对象也都会有初始设置以及 对象销毁前的清理数据的设置。</li></ul><h4 id="4-2-1-构造函数和析构函数"><a href="#4-2-1-构造函数和析构函数" class="headerlink" title="4.2.1 构造函数和析构函数"></a>4.2.1 构造函数和析构函数</h4><p>对象的<strong>初始化和清理</strong>也是两个非常重要的安全问题</p><p>​一个对象或者变量没有初始状态，对其使用后果是未知</p><p>​同样的使用完一个对象或变量，没有及时清理，也会造成一定的安全问题</p><p>c++利用了<strong>构造函数</strong>和<strong>析构函数</strong>解决上述问题，这两个函数将会被编译器自动调用，完成对象初始化和清理工作。</p><p>对象的初始化和清理工作是编译器强制要我们做的事情，因此如果<strong>我们不提供构造和析构，编译器会提供</strong></p><p><strong>编译器提供的构造函数和析构函数是空实现。</strong></p><ul><li><p>构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用。</p></li><li><p>析构函数：主要作用在于对象<strong>销毁前</strong>系统自动调用，执行一些清理工作。</p></li></ul><p><strong>构造函数语法：</strong><code>类名()&#123;&#125;</code></p><ol><li>构造函数，没有返回值也不写void</li><li>函数名称与类名相同</li><li>构造函数可以有参数，因此可以发生重载</li><li>程序在调用对象时候会自动调用构造，无须手动调用,而且只会调用一次</li></ol><p><strong>析构函数语法：</strong> <code>~类名()&#123;&#125;</code></p><ol><li>析构函数，没有返回值也不写void</li><li>函数名称与类名相同,在名称前加上符号  ~</li><li>析构函数不可以有参数，因此不可以发生重载</li><li>程序在对象销毁前会自动调用析构，无须手动调用,而且只会调用一次</li></ol><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person&#123;public:&#x2F;&#x2F;构造函数Person()&#123;cout &lt;&lt; &quot;Person的构造函数调用&quot; &lt;&lt; endl;&#125;&#x2F;&#x2F;析构函数~Person()&#123;cout &lt;&lt; &quot;Person的析构函数调用&quot; &lt;&lt; endl;&#125;&#125;;void test01()&#123;Person p;&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-2-构造函数的分类及调用"><a href="#4-2-2-构造函数的分类及调用" class="headerlink" title="4.2.2 构造函数的分类及调用"></a>4.2.2 构造函数的分类及调用</h4><p>两种分类方式：</p><p>​按参数分为： 有参构造和无参构造</p><p>​按类型分为： 普通构造和拷贝构造</p><p>三种调用方式：</p><p>​括号法</p><p>​显示法</p><p>​隐式转换法</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;1、构造函数分类&#x2F;&#x2F; 按照参数分类分为 有参和无参构造   无参又称为默认构造函数&#x2F;&#x2F; 按照类型分类分为 普通构造和拷贝构造class Person &#123;public:&#x2F;&#x2F;无参（默认）构造函数Person() &#123;cout &lt;&lt; &quot;无参构造函数!&quot; &lt;&lt; endl;&#125;&#x2F;&#x2F;有参构造函数Person(int a) &#123;age &#x3D; a;cout &lt;&lt; &quot;有参构造函数!&quot; &lt;&lt; endl;&#125;&#x2F;&#x2F;拷贝构造函数Person(const Person&amp; p) &#123;age &#x3D; p.age;cout &lt;&lt; &quot;拷贝构造函数!&quot; &lt;&lt; endl;&#125;&#x2F;&#x2F;析构函数~Person() &#123;cout &lt;&lt; &quot;析构函数!&quot; &lt;&lt; endl;&#125;public:int age;&#125;;&#x2F;&#x2F;2、构造函数的调用&#x2F;&#x2F;调用无参构造函数void test01() &#123;Person p; &#x2F;&#x2F;调用无参构造函数&#125;&#x2F;&#x2F;调用有参的构造函数void test02() &#123;&#x2F;&#x2F;2.1  括号法，常用Person p1(10);&#x2F;&#x2F;注意1：调用无参构造函数不能加括号，如果加了编译器认为这是一个函数声明&#x2F;&#x2F;Person p2();&#x2F;&#x2F;2.2 显式法Person p2 &#x3D; Person(10); Person p3 &#x3D; Person(p2);&#x2F;&#x2F;Person(10)单独写就是匿名对象  当前行结束之后，马上析构&#x2F;&#x2F;2.3 隐式转换法Person p4 &#x3D; 10; &#x2F;&#x2F; Person p4 &#x3D; Person(10); Person p5 &#x3D; p4; &#x2F;&#x2F; Person p5 &#x3D; Person(p4); &#x2F;&#x2F;注意2：不能利用 拷贝构造函数 初始化匿名对象 编译器认为是对象声明&#x2F;&#x2F;Person p5(p4);&#125;int main() &#123;test01();&#x2F;&#x2F;test02();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-3-拷贝构造函数调用时机"><a href="#4-2-3-拷贝构造函数调用时机" class="headerlink" title="4.2.3 拷贝构造函数调用时机"></a>4.2.3 拷贝构造函数调用时机</h4><p>C++中拷贝构造函数调用时机通常有三种情况</p><ul><li>使用一个已经创建完毕的对象来初始化一个新对象</li><li>值传递的方式给函数参数传值</li><li>以值方式返回局部对象</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person &#123;public:Person() &#123;cout &lt;&lt; &quot;无参构造函数!&quot; &lt;&lt; endl;mAge &#x3D; 0;&#125;Person(int age) &#123;cout &lt;&lt; &quot;有参构造函数!&quot; &lt;&lt; endl;mAge &#x3D; age;&#125;Person(const Person&amp; p) &#123;cout &lt;&lt; &quot;拷贝构造函数!&quot; &lt;&lt; endl;mAge &#x3D; p.mAge;&#125;&#x2F;&#x2F;析构函数在释放内存之前调用~Person() &#123;cout &lt;&lt; &quot;析构函数!&quot; &lt;&lt; endl;&#125;public:int mAge;&#125;;&#x2F;&#x2F;1. 使用一个已经创建完毕的对象来初始化一个新对象void test01() &#123;Person man(100); &#x2F;&#x2F;p对象已经创建完毕Person newman(man); &#x2F;&#x2F;调用拷贝构造函数Person newman2 &#x3D; man; &#x2F;&#x2F;拷贝构造&#x2F;&#x2F;Person newman3;&#x2F;&#x2F;newman3 &#x3D; man; &#x2F;&#x2F;不是调用拷贝构造函数，赋值操作&#x2F;&#x2F;&#x2F;拷贝构造必须是初始化的时候一起赋值&#125;&#x2F;&#x2F;2. 值传递的方式给函数参数传值&#x2F;&#x2F;相当于Person p1 &#x3D; p;void doWork(Person p1) &#123;&#125;void test02() &#123;Person p; &#x2F;&#x2F;无参构造函数doWork(p);&#125;&#x2F;&#x2F;3. 以值方式返回局部对象Person doWork2()&#123;Person p1;cout &lt;&lt; (int *)&amp;p1 &lt;&lt; endl;return p1;&#125;void test03()&#123;Person p &#x3D; doWork2();cout &lt;&lt; (int *)&amp;p &lt;&lt; endl;&#125;int main() &#123;&#x2F;&#x2F;test01();&#x2F;&#x2F;test02();test03();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-4-构造函数调用规则"><a href="#4-2-4-构造函数调用规则" class="headerlink" title="4.2.4 构造函数调用规则"></a>4.2.4 构造函数调用规则</h4><p>默认情况下，c++编译器至少给一个类添加3个函数</p><p>1．默认构造函数(无参，函数体为空)</p><p>2．默认析构函数(无参，函数体为空)</p><p>3．默认拷贝构造函数，对属性进行值拷贝</p><p>构造函数调用规则如下：</p><ul><li><p>如果用户定义有参构造函数，c++不在提供默认无参构造，但是会提供默认拷贝构造</p></li><li><p>如果用户定义拷贝构造函数，c++不会再提供其他构造函数</p></li></ul><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person &#123;public:&#x2F;&#x2F;无参（默认）构造函数Person() &#123;cout &lt;&lt; &quot;无参构造函数!&quot; &lt;&lt; endl;&#125;&#x2F;&#x2F;有参构造函数Person(int a) &#123;age &#x3D; a;cout &lt;&lt; &quot;有参构造函数!&quot; &lt;&lt; endl;&#125;&#x2F;&#x2F;拷贝构造函数Person(const Person&amp; p) &#123;age &#x3D; p.age;cout &lt;&lt; &quot;拷贝构造函数!&quot; &lt;&lt; endl;&#125;&#x2F;&#x2F;析构函数~Person() &#123;cout &lt;&lt; &quot;析构函数!&quot; &lt;&lt; endl;&#125;public:int age;&#125;;void test01()&#123;Person p1(18);&#x2F;&#x2F;如果不写拷贝构造，编译器会自动添加拷贝构造，并且做浅拷贝操作Person p2(p1);cout &lt;&lt; &quot;p2的年龄为： &quot; &lt;&lt; p2.age &lt;&lt; endl;&#125;void test02()&#123;&#x2F;&#x2F;如果用户提供有参构造，编译器不会提供默认构造，会提供拷贝构造Person p1; &#x2F;&#x2F;此时如果用户自己没有提供默认构造，会出错Person p2(10); &#x2F;&#x2F;用户提供的有参Person p3(p2); &#x2F;&#x2F;此时如果用户没有提供拷贝构造，编译器会提供&#x2F;&#x2F;如果用户提供拷贝构造，编译器不会提供其他构造函数Person p4; &#x2F;&#x2F;此时如果用户自己没有提供默认构造，会出错Person p5(10); &#x2F;&#x2F;此时如果用户自己没有提供有参，会出错Person p6(p5); &#x2F;&#x2F;用户自己提供拷贝构造&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拷贝构造大于用户定义的 有参构造大于默认的构造</p><h4 id="4-2-5-深拷贝与浅拷贝"><a href="#4-2-5-深拷贝与浅拷贝" class="headerlink" title="4.2.5 深拷贝与浅拷贝"></a>4.2.5 深拷贝与浅拷贝</h4><p>深浅拷贝是面试经典问题，也是常见的一个坑</p><p>浅拷贝：简单的赋值拷贝操作</p><p>深拷贝：在堆区重新申请空间，进行拷贝操作</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person &#123;public:&#x2F;&#x2F;无参（默认）构造函数Person() &#123;cout &lt;&lt; &quot;无参构造函数!&quot; &lt;&lt; endl;&#125;&#x2F;&#x2F;有参构造函数Person(int age ,int height) &#123;cout &lt;&lt; &quot;有参构造函数!&quot; &lt;&lt; endl;m_age &#x3D; age;m_height &#x3D; new int(height);&#125;&#x2F;&#x2F;拷贝构造函数  Person(const Person&amp; p) &#123;cout &lt;&lt; &quot;拷贝构造函数!&quot; &lt;&lt; endl;&#x2F;&#x2F;如果不利用深拷贝在堆区创建新内存，会导致浅拷贝带来的重复释放堆区问题m_age &#x3D; p.m_age;m_height &#x3D; new int(*p.m_height);&#125;&#x2F;&#x2F;析构函数~Person() &#123;cout &lt;&lt; &quot;析构函数!&quot; &lt;&lt; endl;if (m_height !&#x3D; NULL)&#123;delete m_height;&#125;&#125;public:int m_age;int* m_height;&#125;;void test01()&#123;Person p1(18, 180);Person p2(p1);cout &lt;&lt; &quot;p1的年龄： &quot; &lt;&lt; p1.m_age &lt;&lt; &quot; 身高： &quot; &lt;&lt; *p1.m_height &lt;&lt; endl;cout &lt;&lt; &quot;p2的年龄： &quot; &lt;&lt; p2.m_age &lt;&lt; &quot; 身高： &quot; &lt;&lt; *p2.m_height &lt;&lt; endl;&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题</p></blockquote><h4 id="4-2-6-初始化列表"><a href="#4-2-6-初始化列表" class="headerlink" title="4.2.6 初始化列表"></a>4.2.6 初始化列表</h4><p><strong>作用：</strong></p><p>C++提供了初始化列表语法，用来初始化属性</p><p><strong>语法：</strong><code>构造函数()：属性1(值1),属性2（值2）... &#123;&#125;</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person &#123;public:&#x2F;&#x2F;&#x2F;&#x2F;传统方式初始化&#x2F;&#x2F;Person(int a, int b, int c) &#123;&#x2F;&#x2F;m_A &#x3D; a;&#x2F;&#x2F;m_B &#x3D; b;&#x2F;&#x2F;m_C &#x3D; c;&#x2F;&#x2F;&#125;&#x2F;&#x2F;初始化列表方式初始化Person(int a, int b, int c) :m_A(a), m_B(b), m_C(c) &#123;&#125;void PrintPerson() &#123;cout &lt;&lt; &quot;mA:&quot; &lt;&lt; m_A &lt;&lt; endl;cout &lt;&lt; &quot;mB:&quot; &lt;&lt; m_B &lt;&lt; endl;cout &lt;&lt; &quot;mC:&quot; &lt;&lt; m_C &lt;&lt; endl;&#125;private:int m_A;int m_B;int m_C;&#125;;int main() &#123;Person p(1, 2, 3);p.PrintPerson();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-7-类对象作为类成员"><a href="#4-2-7-类对象作为类成员" class="headerlink" title="4.2.7 类对象作为类成员"></a>4.2.7 类对象作为类成员</h4><p>C++类中的成员可以是另一个类的对象，我们称该成员为 对象成员</p><p>例如：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class A &#123;&#125;class B&#123;    A a；&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>B类中有对象A作为成员，A为对象成员</p><p>那么当创建B对象时，A与B的构造和析构的顺序是谁先谁后？</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Phone&#123;public:Phone(string name)&#123;m_PhoneName &#x3D; name;cout &lt;&lt; &quot;Phone构造&quot; &lt;&lt; endl;&#125;~Phone()&#123;cout &lt;&lt; &quot;Phone析构&quot; &lt;&lt; endl;&#125;string m_PhoneName;&#125;;class Person&#123;public:&#x2F;&#x2F;初始化列表可以告诉编译器调用哪一个构造函数Person(string name, string pName) :m_Name(name), m_Phone(pName)&#123;cout &lt;&lt; &quot;Person构造&quot; &lt;&lt; endl;&#125;~Person()&#123;cout &lt;&lt; &quot;Person析构&quot; &lt;&lt; endl;&#125;void playGame()&#123;cout &lt;&lt; m_Name &lt;&lt; &quot; 使用&quot; &lt;&lt; m_Phone.m_PhoneName &lt;&lt; &quot; 牌手机! &quot; &lt;&lt; endl;&#125;string m_Name;Phone m_Phone;&#125;;void test01()&#123;&#x2F;&#x2F;当类中成员是其他类对象时，我们称该成员为 对象成员&#x2F;&#x2F;构造的顺序是 ：先调用对象成员的构造，再调用本类构造&#x2F;&#x2F;析构顺序与构造相反Person p(&quot;张三&quot; , &quot;苹果X&quot;);p.playGame();&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-8-静态成员"><a href="#4-2-8-静态成员" class="headerlink" title="4.2.8 静态成员"></a>4.2.8 静态成员</h4><p>静态成员就是在成员变量和成员函数前加上关键字static，称为静态成员</p><p>静态成员分为：</p><ul><li>静态成员变量<ul><li>所有对象共享同一份数据</li><li>在编译阶段分配内存</li><li>类内声明，类外初始化</li></ul></li><li>静态成员函数<ul><li>所有对象共享同一个函数</li><li>静态成员函数只能访问静态成员变量</li></ul></li></ul><p><strong>示例1 ：</strong>静态成员变量</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person&#123;public:static int m_A; &#x2F;&#x2F;静态成员变量&#x2F;&#x2F;静态成员变量特点：&#x2F;&#x2F;1 在编译阶段分配内存&#x2F;&#x2F;2 类内声明，类外初始化&#x2F;&#x2F;3 所有对象共享同一份数据private:static int m_B; &#x2F;&#x2F;静态成员变量也是有访问权限的&#125;;int Person::m_A &#x3D; 10;int Person::m_B &#x3D; 10;void test01()&#123;&#x2F;&#x2F;静态成员变量两种访问方式&#x2F;&#x2F;1、通过对象Person p1;p1.m_A &#x3D; 100;cout &lt;&lt; &quot;p1.m_A &#x3D; &quot; &lt;&lt; p1.m_A &lt;&lt; endl;Person p2;p2.m_A &#x3D; 200;cout &lt;&lt; &quot;p1.m_A &#x3D; &quot; &lt;&lt; p1.m_A &lt;&lt; endl; &#x2F;&#x2F;共享同一份数据cout &lt;&lt; &quot;p2.m_A &#x3D; &quot; &lt;&lt; p2.m_A &lt;&lt; endl;&#x2F;&#x2F;2、通过类名cout &lt;&lt; &quot;m_A &#x3D; &quot; &lt;&lt; Person::m_A &lt;&lt; endl;&#x2F;&#x2F;cout &lt;&lt; &quot;m_B &#x3D; &quot; &lt;&lt; Person::m_B &lt;&lt; endl; &#x2F;&#x2F;私有权限访问不到&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例2：</strong>静态成员函数</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person&#123;public:&#x2F;&#x2F;静态成员函数特点：&#x2F;&#x2F;1 程序共享一个函数&#x2F;&#x2F;2 静态成员函数只能访问静态成员变量static void func()&#123;cout &lt;&lt; &quot;func调用&quot; &lt;&lt; endl;m_A &#x3D; 100;&#x2F;&#x2F;m_B &#x3D; 100; &#x2F;&#x2F;错误，不可以访问非静态成员变量&#125;static int m_A; &#x2F;&#x2F;静态成员变量int m_B; &#x2F;&#x2F; private:&#x2F;&#x2F;静态成员函数也是有访问权限的static void func2()&#123;cout &lt;&lt; &quot;func2调用&quot; &lt;&lt; endl;&#125;&#125;;int Person::m_A &#x3D; 10;void test01()&#123;&#x2F;&#x2F;静态成员变量两种访问方式&#x2F;&#x2F;1、通过对象Person p1;p1.func();&#x2F;&#x2F;2、通过类名Person::func();&#x2F;&#x2F;Person::func2(); &#x2F;&#x2F;私有权限访问不到&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-C-对象模型和this指针"><a href="#4-3-C-对象模型和this指针" class="headerlink" title="4.3 C++对象模型和this指针"></a>4.3 C++对象模型和this指针</h3><h4 id="4-3-1-成员变量和成员函数分开存储"><a href="#4-3-1-成员变量和成员函数分开存储" class="headerlink" title="4.3.1 成员变量和成员函数分开存储"></a>4.3.1 成员变量和成员函数分开存储</h4><p>在C++中，类内的成员变量和成员函数分开存储</p><p>只有非静态成员变量才属于类的对象上</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person &#123;public:Person() &#123;mA &#x3D; 0;&#125;&#x2F;&#x2F;非静态成员变量占对象空间int mA;&#x2F;&#x2F;静态成员变量不占对象空间static int mB; &#x2F;&#x2F;函数也不占对象空间，所有函数共享一个函数实例void func() &#123;cout &lt;&lt; &quot;mA:&quot; &lt;&lt; this-&gt;mA &lt;&lt; endl;&#125;&#x2F;&#x2F;静态成员函数也不占对象空间static void sfunc() &#123;&#125;&#125;;int main() &#123;cout &lt;&lt; sizeof(Person) &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-2-this指针概念"><a href="#4-3-2-this指针概念" class="headerlink" title="4.3.2 this指针概念"></a>4.3.2 this指针概念</h4><p>通过4.3.1我们知道在C++中成员变量和成员函数是分开存储的</p><p>每一个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用一块代码</p><p>那么问题是：这一块代码是如何区分那个对象调用自己的呢？</p><p>c++通过提供特殊的对象指针，this指针，解决上述问题。<strong>this指针指向被调用的成员函数所属的对象</strong></p><p>this指针是隐含每一个非静态成员函数内的一种指针</p><p>this指针不需要定义，直接使用即可</p><p>this指针的用途：</p><ul><li>当形参和成员变量同名时，可用this指针来区分</li><li>在类的非静态成员函数中返回对象本身，可使用return *this</li></ul><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person&#123;public:Person(int age)&#123;&#x2F;&#x2F;1、当形参和成员变量同名时，可用this指针来区分this-&gt;age &#x3D; age;&#125;Person&amp; PersonAddPerson(Person p)&#123;this-&gt;age +&#x3D; p.age;&#x2F;&#x2F;返回对象本身return *this;&#125;int age;&#125;;void test01()&#123;Person p1(10);cout &lt;&lt; &quot;p1.age &#x3D; &quot; &lt;&lt; p1.age &lt;&lt; endl;Person p2(10);p2.PersonAddPerson(p1).PersonAddPerson(p1).PersonAddPerson(p1);cout &lt;&lt; &quot;p2.age &#x3D; &quot; &lt;&lt; p2.age &lt;&lt; endl;&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-3-空指针访问成员函数"><a href="#4-3-3-空指针访问成员函数" class="headerlink" title="4.3.3 空指针访问成员函数"></a>4.3.3 空指针访问成员函数</h4><p>C++中空指针也是可以调用成员函数的，但是也要注意有没有用到this指针</p><p>如果用到this指针，需要加以判断保证代码的健壮性</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;空指针访问成员函数class Person &#123;public:void ShowClassName() &#123;cout &lt;&lt; &quot;我是Person类!&quot; &lt;&lt; endl;&#125;void ShowPerson() &#123;if (this &#x3D;&#x3D; NULL) &#123;return;&#125;cout &lt;&lt; mAge &lt;&lt; endl;&#125;public:int mAge;&#125;;void test01()&#123;Person * p &#x3D; NULL;p-&gt;ShowClassName(); &#x2F;&#x2F;空指针，可以调用成员函数p-&gt;ShowPerson();  &#x2F;&#x2F;但是如果成员函数中用到了this指针，就不可以了&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>person是一个类，是一个抽象的东西，所以函数不存在数据，只有常量有，所以空指针可以去调用成员函数，所以静态变量也不存在数据</p><h4 id="4-3-4-const修饰成员函数"><a href="#4-3-4-const修饰成员函数" class="headerlink" title="4.3.4 const修饰成员函数"></a>4.3.4 const修饰成员函数</h4><p><strong>常函数：</strong></p><ul><li>成员函数后加const后我们称为这个函数为<strong>常函数</strong></li><li>常函数内不可以修改成员属性</li><li>成员属性声明时加关键字mutable后，在常函数中依然可以修改</li></ul><p><strong>常对象：</strong></p><ul><li>声明对象前加const称该对象为常对象</li><li>常对象只能调用常函数</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person &#123;public:Person() &#123;m_A &#x3D; 0;m_B &#x3D; 0;&#125;&#x2F;&#x2F;this指针的本质是一个指针常量，指针的指向不可修改&#x2F;&#x2F;如果想让指针指向的值也不可以修改，需要声明常函数void ShowPerson() const &#123;&#x2F;&#x2F;const Type* const pointer;                &#x2F;&#x2F;这里从左往右，第二个const表示指针的指向不能改，第一个表示指向的数据不能改，刚好符合const修饰成员函数的定义，即常函数内不可以修改成员属性（除非这里的成员属性加了mutable）        &#x2F;&#x2F;this &#x3D; NULL; &#x2F;&#x2F;不能修改指针的指向 Person* const this;&#x2F;&#x2F;这个形式，不就是引用吗？&#x2F;&#x2F;this-&gt;mA &#x3D; 100; &#x2F;&#x2F;但是this指针指向的对象的数据是可以修改的&#x2F;&#x2F;const修饰成员函数，表示指针指向的内存空间的数据不能修改，除了mutable修饰的变量this-&gt;m_B &#x3D; 100;&#125;void MyFunc() const &#123;&#x2F;&#x2F;mA &#x3D; 10000;&#125;public:int m_A;mutable int m_B; &#x2F;&#x2F;可修改 可变的&#125;;&#x2F;&#x2F;const修饰对象  常对象void test01() &#123;const Person person; &#x2F;&#x2F;常量对象  cout &lt;&lt; person.m_A &lt;&lt; endl;&#x2F;&#x2F;person.mA &#x3D; 100; &#x2F;&#x2F;常对象不能修改成员变量的值,但是可以访问person.m_B &#x3D; 100; &#x2F;&#x2F;但是常对象可以修改mutable修饰成员变量&#x2F;&#x2F;常对象访问成员函数person.MyFunc(); &#x2F;&#x2F;常对象不能调用const的函数&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-友元"><a href="#4-4-友元" class="headerlink" title="4.4 友元"></a>4.4 友元</h3><p>生活中你的家有客厅(Public)，有你的卧室(Private)</p><p>客厅所有来的客人都可以进去，但是你的卧室是私有的，也就是说只有你能进去</p><p>但是呢，你也可以允许你的好闺蜜好基友进去。</p><p>在程序里，有些<strong>私有属性 也想让类外特殊的一些函数或者类</strong>进行访问，就需要用到友元的技术</p><p>友元的目的就是让一个函数或者类 访问另一个类中私有成员</p><p>友元的关键字为  &#x3D;&#x3D;friend&#x3D;&#x3D;</p><p>友元的三种实现</p><ul><li>全局函数做友元</li><li>类做友元</li><li>成员函数做友元</li></ul><h4 id="4-4-1-全局函数做友元"><a href="#4-4-1-全局函数做友元" class="headerlink" title="4.4.1 全局函数做友元"></a>4.4.1 全局函数做友元</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Building&#123;&#x2F;&#x2F;告诉编译器 goodGay全局函数 是 Building类的好朋友，可以访问类中的私有内容friend void goodGay(Building * building);public:Building()&#123;this-&gt;m_SittingRoom &#x3D; &quot;客厅&quot;;this-&gt;m_BedRoom &#x3D; &quot;卧室&quot;;&#125;public:string m_SittingRoom; &#x2F;&#x2F;客厅private:string m_BedRoom; &#x2F;&#x2F;卧室&#125;;void goodGay(Building * building)&#123;cout &lt;&lt; &quot;好基友正在访问： &quot; &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;cout &lt;&lt; &quot;好基友正在访问： &quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;&#125;void test01()&#123;Building b;goodGay(&amp;b);&#125;int main()&#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-4-2-类做友元"><a href="#4-4-2-类做友元" class="headerlink" title="4.4.2 类做友元"></a>4.4.2 类做友元</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Building;class goodGay&#123;public:goodGay();void visit();private:Building *building;&#125;;class Building&#123;&#x2F;&#x2F;告诉编译器 goodGay类是Building类的好朋友，可以访问到Building类中私有内容friend class goodGay;public:Building();public:string m_SittingRoom; &#x2F;&#x2F;客厅private:string m_BedRoom;&#x2F;&#x2F;卧室&#125;;Building::Building()&#123;this-&gt;m_SittingRoom &#x3D; &quot;客厅&quot;;this-&gt;m_BedRoom &#x3D; &quot;卧室&quot;;&#125;goodGay::goodGay()&#123;building &#x3D; new Building;&#125;void goodGay::visit()&#123;cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;&#125;void test01()&#123;goodGay gg;gg.visit();&#125;int main()&#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-4-3-成员函数做友元"><a href="#4-4-3-成员函数做友元" class="headerlink" title="4.4.3 成员函数做友元"></a>4.4.3 成员函数做友元</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Building;class goodGay&#123;public:goodGay();void visit(); &#x2F;&#x2F;只让visit函数作为Building的好朋友，可以发访问Building中私有内容void visit2(); private:Building *building;&#125;;class Building&#123;&#x2F;&#x2F;告诉编译器  goodGay类中的visit成员函数 是Building好朋友，可以访问私有内容friend void goodGay::visit();public:Building();public:string m_SittingRoom; &#x2F;&#x2F;客厅private:string m_BedRoom;&#x2F;&#x2F;卧室&#125;;Building::Building()&#123;this-&gt;m_SittingRoom &#x3D; &quot;客厅&quot;;this-&gt;m_BedRoom &#x3D; &quot;卧室&quot;;&#125;goodGay::goodGay()&#123;building &#x3D; new Building;&#125;void goodGay::visit()&#123;cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;&#125;void goodGay::visit2()&#123;cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;&#x2F;&#x2F;cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;&#125;void test01()&#123;goodGay  gg;gg.visit();&#125;int main()&#123;    test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-运算符重载"><a href="#4-5-运算符重载" class="headerlink" title="4.5 运算符重载"></a>4.5 运算符重载</h3><p>运算符重载概念：对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型</p><h4 id="4-5-1-加号运算符重载"><a href="#4-5-1-加号运算符重载" class="headerlink" title="4.5.1 加号运算符重载"></a>4.5.1 加号运算符重载</h4><p>作用：实现两个自定义数据类型相加的运算</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person &#123;public:Person() &#123;&#125;;Person(int a, int b)&#123;this-&gt;m_A &#x3D; a;this-&gt;m_B &#x3D; b;&#125;&#x2F;&#x2F;成员函数实现 + 号运算符重载Person operator+(const Person&amp; p) &#123;Person temp;temp.m_A &#x3D; this-&gt;m_A + p.m_A;temp.m_B &#x3D; this-&gt;m_B + p.m_B;return temp;&#125;public:int m_A;int m_B;&#125;;&#x2F;&#x2F;全局函数实现 + 号运算符重载&#x2F;&#x2F;Person operator+(const Person&amp; p1, const Person&amp; p2) &#123;&#x2F;&#x2F;Person temp(0, 0);&#x2F;&#x2F;temp.m_A &#x3D; p1.m_A + p2.m_A;&#x2F;&#x2F;temp.m_B &#x3D; p1.m_B + p2.m_B;&#x2F;&#x2F;return temp;&#x2F;&#x2F;&#125;&#x2F;&#x2F;运算符重载 可以发生函数重载 Person operator+(const Person&amp; p2, int val)  &#123;Person temp;temp.m_A &#x3D; p2.m_A + val;temp.m_B &#x3D; p2.m_B + val;return temp;&#125;void test() &#123;Person p1(10, 10);Person p2(20, 20);&#x2F;&#x2F;成员函数方式Person p3 &#x3D; p2 + p1;  &#x2F;&#x2F;相当于 p2.operaor+(p1)cout &lt;&lt; &quot;mA:&quot; &lt;&lt; p3.m_A &lt;&lt; &quot; mB:&quot; &lt;&lt; p3.m_B &lt;&lt; endl;Person p4 &#x3D; p3 + 10; &#x2F;&#x2F;相当于 operator+(p3,10)cout &lt;&lt; &quot;mA:&quot; &lt;&lt; p4.m_A &lt;&lt; &quot; mB:&quot; &lt;&lt; p4.m_B &lt;&lt; endl;&#125;int main() &#123;test();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结1：对于内置的数据类型的表达式的的运算符是不可能改变的</p></blockquote><blockquote><p>总结2：不要滥用运算符重载</p></blockquote><h4 id="4-5-2-左移运算符重载"><a href="#4-5-2-左移运算符重载" class="headerlink" title="4.5.2 左移运算符重载"></a>4.5.2 左移运算符重载</h4><p>作用：可以输出自定义数据类型</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person &#123;friend ostream&amp; operator&lt;&lt;(ostream&amp; out, Person&amp; p);public:Person(int a, int b)&#123;this-&gt;m_A &#x3D; a;this-&gt;m_B &#x3D; b;&#125;&#x2F;&#x2F;成员函数 实现不了  p &lt;&lt; cout 不是我们想要的效果&#x2F;&#x2F;void operator&lt;&lt;(Person&amp; p)&#123;&#x2F;&#x2F;&#125;private:int m_A;int m_B;&#125;;&#x2F;&#x2F;全局函数实现左移重载&#x2F;&#x2F;ostream对象只能有一个ostream&amp; operator&lt;&lt;(ostream&amp; out, Person&amp; p) &#123;out &lt;&lt; &quot;a:&quot; &lt;&lt; p.m_A &lt;&lt; &quot; b:&quot; &lt;&lt; p.m_B;return out;&#125;void test() &#123;Person p1(10, 20);cout &lt;&lt; p1 &lt;&lt; &quot;hello world&quot; &lt;&lt; endl; &#x2F;&#x2F;链式编程&#125;int main() &#123;test();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：重载左移运算符配合友元可以实现输出自定义数据类型</p></blockquote><h4 id="4-5-3-递增运算符重载"><a href="#4-5-3-递增运算符重载" class="headerlink" title="4.5.3 递增运算符重载"></a>4.5.3 递增运算符重载</h4><p>作用： 通过重载递增运算符，实现自己的整型数据</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class MyInteger &#123;friend ostream&amp; operator&lt;&lt;(ostream&amp; out, MyInteger myint);public:MyInteger() &#123;m_Num &#x3D; 0;&#125;&#x2F;&#x2F;前置++MyInteger&amp; operator++() &#123;&#x2F;&#x2F;先++m_Num++;&#x2F;&#x2F;再返回return *this;&#125;&#x2F;&#x2F;后置++MyInteger operator++(int) &#123;&#x2F;&#x2F;先返回MyInteger temp &#x3D; *this; &#x2F;&#x2F;记录当前本身的值，然后让本身的值加1，但是返回的是以前的值，达到先返回后++；m_Num++;return temp;&#125;private:int m_Num;&#125;;ostream&amp; operator&lt;&lt;(ostream&amp; out, MyInteger myint) &#123;out &lt;&lt; myint.m_Num;return out;&#125;&#x2F;&#x2F;前置++ 先++ 再返回void test01() &#123;MyInteger myInt;cout &lt;&lt; ++myInt &lt;&lt; endl;cout &lt;&lt; myInt &lt;&lt; endl;&#125;&#x2F;&#x2F;后置++ 先返回 再++void test02() &#123;MyInteger myInt;cout &lt;&lt; myInt++ &lt;&lt; endl;cout &lt;&lt; myInt &lt;&lt; endl;&#125;int main() &#123;test01();&#x2F;&#x2F;test02();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结： 前置递增返回引用，后置递增返回值</p></blockquote><h4 id="4-5-4-赋值运算符重载"><a href="#4-5-4-赋值运算符重载" class="headerlink" title="4.5.4 赋值运算符重载"></a>4.5.4 赋值运算符重载</h4><p>c++编译器至少给一个类添加4个函数</p><ol><li><p>默认构造函数(无参，函数体为空)</p></li><li><p>默认析构函数(无参，函数体为空)</p></li><li><p>默认拷贝构造函数，对属性进行值拷贝</p></li><li><p>赋值运算符 operator&#x3D;, 对属性进行值拷贝</p></li></ol><p>如果类中有属性指向堆区，做赋值操作时也会出现深浅拷贝问题</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person&#123;public:Person(int age)&#123;&#x2F;&#x2F;将年龄数据开辟到堆区m_Age &#x3D; new int(age);&#125;&#x2F;&#x2F;重载赋值运算符 Person&amp; operator&#x3D;(Person &amp;p)&#123;if (m_Age !&#x3D; NULL)&#123;delete m_Age;m_Age &#x3D; NULL;&#125;&#x2F;&#x2F;编译器提供的代码是浅拷贝&#x2F;&#x2F;m_Age &#x3D; p.m_Age;&#x2F;&#x2F;提供深拷贝 解决浅拷贝的问题m_Age &#x3D; new int(*p.m_Age);&#x2F;&#x2F;返回自身return *this;&#125;~Person()&#123;if (m_Age !&#x3D; NULL)&#123;delete m_Age;m_Age &#x3D; NULL;&#125;&#125;&#x2F;&#x2F;年龄的指针int *m_Age;&#125;;void test01()&#123;Person p1(18);Person p2(20);Person p3(30);p3 &#x3D; p2 &#x3D; p1; &#x2F;&#x2F;赋值操作cout &lt;&lt; &quot;p1的年龄为：&quot; &lt;&lt; *p1.m_Age &lt;&lt; endl;cout &lt;&lt; &quot;p2的年龄为：&quot; &lt;&lt; *p2.m_Age &lt;&lt; endl;cout &lt;&lt; &quot;p3的年龄为：&quot; &lt;&lt; *p3.m_Age &lt;&lt; endl;&#125;int main() &#123;test01();&#x2F;&#x2F;int a &#x3D; 10;&#x2F;&#x2F;int b &#x3D; 20;&#x2F;&#x2F;int c &#x3D; 30;&#x2F;&#x2F;c &#x3D; b &#x3D; a;&#x2F;&#x2F;cout &lt;&lt; &quot;a &#x3D; &quot; &lt;&lt; a &lt;&lt; endl;&#x2F;&#x2F;cout &lt;&lt; &quot;b &#x3D; &quot; &lt;&lt; b &lt;&lt; endl;&#x2F;&#x2F;cout &lt;&lt; &quot;c &#x3D; &quot; &lt;&lt; c &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-5-5-关系运算符重载"><a href="#4-5-5-关系运算符重载" class="headerlink" title="4.5.5 关系运算符重载"></a>4.5.5 关系运算符重载</h4><p><strong>作用：</strong>重载关系运算符，可以让两个自定义类型对象进行对比操作</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Person&#123;public:Person(string name, int age)&#123;this-&gt;m_Name &#x3D; name;this-&gt;m_Age &#x3D; age;&#125;;bool operator&#x3D;&#x3D;(Person &amp; p)&#123;if (this-&gt;m_Name &#x3D;&#x3D; p.m_Name &amp;&amp; this-&gt;m_Age &#x3D;&#x3D; p.m_Age)&#123;return true;&#125;else&#123;return false;&#125;&#125;bool operator!&#x3D;(Person &amp; p)&#123;if (this-&gt;m_Name &#x3D;&#x3D; p.m_Name &amp;&amp; this-&gt;m_Age &#x3D;&#x3D; p.m_Age)&#123;return false;&#125;else&#123;return true;&#125;&#125;string m_Name;int m_Age;&#125;;void test01()&#123;&#x2F;&#x2F;int a &#x3D; 0;&#x2F;&#x2F;int b &#x3D; 0;Person a(&quot;孙悟空&quot;, 18);Person b(&quot;孙悟空&quot;, 18);if (a &#x3D;&#x3D; b)&#123;cout &lt;&lt; &quot;a和b相等&quot; &lt;&lt; endl;&#125;else&#123;cout &lt;&lt; &quot;a和b不相等&quot; &lt;&lt; endl;&#125;if (a !&#x3D; b)&#123;cout &lt;&lt; &quot;a和b不相等&quot; &lt;&lt; endl;&#125;else&#123;cout &lt;&lt; &quot;a和b相等&quot; &lt;&lt; endl;&#125;&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-5-6-函数调用运算符重载"><a href="#4-5-6-函数调用运算符重载" class="headerlink" title="4.5.6 函数调用运算符重载"></a>4.5.6 函数调用运算符重载</h4><ul><li>函数调用运算符 ()  也可以重载</li><li>由于重载后使用的方式非常像函数的调用，因此称为仿函数</li><li>仿函数没有固定写法，非常灵活</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class MyPrint&#123;public:void operator()(string text)&#123;cout &lt;&lt; text &lt;&lt; endl;&#125;&#125;;void test01()&#123;&#x2F;&#x2F;重载的（）操作符 也称为仿函数MyPrint myFunc;myFunc(&quot;hello world&quot;);&#125;class MyAdd&#123;public:int operator()(int v1, int v2)&#123;return v1 + v2;&#125;&#125;;void test02()&#123;MyAdd add;int ret &#x3D; add(10, 10);cout &lt;&lt; &quot;ret &#x3D; &quot; &lt;&lt; ret &lt;&lt; endl;&#x2F;&#x2F;匿名对象调用  cout &lt;&lt; &quot;MyAdd()(100,100) &#x3D; &quot; &lt;&lt; MyAdd()(100, 100) &lt;&lt; endl;&#x2F;&#x2F; 逆天，什么玩意    &#x2F;&#x2F;cout &lt;&lt; &quot;MyAdd(100,100) &#x3D; &quot; &lt;&lt; MyAdd()(100, 100) &lt;&lt; endl;这样不也结果一样？    &#125;int main() &#123;test01();test02();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-6-继承"><a href="#4-6-继承" class="headerlink" title="4.6  继承"></a>4.6  继承</h3><p><strong>继承是面向对象三大特性之一</strong></p><p>有些类与类之间存在特殊的关系，例如下图中：</p><p><img src="/assets/1544861202252.png" alt="1544861202252"></p><p>我们发现，定义这些类时，下级别的成员除了拥有上一级的共性，还有自己的特性。</p><p>这个时候我们就可以考虑利用继承的技术，减少重复代码</p><h4 id="4-6-1-继承的基本语法"><a href="#4-6-1-继承的基本语法" class="headerlink" title="4.6.1 继承的基本语法"></a>4.6.1 继承的基本语法</h4><p>例如我们看到很多网站中，都有公共的头部，公共的底部，甚至公共的左侧列表，只有中心内容不同</p><p>接下来我们分别利用普通写法和继承的写法来实现网页中的内容，看一下继承存在的意义以及好处</p><p><strong>普通实现：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;Java页面class Java &#123;public:void header()&#123;cout &lt;&lt; &quot;首页、公开课、登录、注册...（公共头部）&quot; &lt;&lt; endl;&#125;void footer()&#123;cout &lt;&lt; &quot;帮助中心、交流合作、站内地图...(公共底部)&quot; &lt;&lt; endl;&#125;void left()&#123;cout &lt;&lt; &quot;Java,Python,C++...(公共分类列表)&quot; &lt;&lt; endl;&#125;void content()&#123;cout &lt;&lt; &quot;JAVA学科视频&quot; &lt;&lt; endl;&#125;&#125;;&#x2F;&#x2F;Python页面class Python&#123;public:void header()&#123;cout &lt;&lt; &quot;首页、公开课、登录、注册...（公共头部）&quot; &lt;&lt; endl;&#125;void footer()&#123;cout &lt;&lt; &quot;帮助中心、交流合作、站内地图...(公共底部)&quot; &lt;&lt; endl;&#125;void left()&#123;cout &lt;&lt; &quot;Java,Python,C++...(公共分类列表)&quot; &lt;&lt; endl;&#125;void content()&#123;cout &lt;&lt; &quot;Python学科视频&quot; &lt;&lt; endl;&#125;&#125;;&#x2F;&#x2F;C++页面class CPP &#123;public:void header()&#123;cout &lt;&lt; &quot;首页、公开课、登录、注册...（公共头部）&quot; &lt;&lt; endl;&#125;void footer()&#123;cout &lt;&lt; &quot;帮助中心、交流合作、站内地图...(公共底部)&quot; &lt;&lt; endl;&#125;void left()&#123;cout &lt;&lt; &quot;Java,Python,C++...(公共分类列表)&quot; &lt;&lt; endl;&#125;void content()&#123;cout &lt;&lt; &quot;C++学科视频&quot; &lt;&lt; endl;&#125;&#125;;void test01()&#123;&#x2F;&#x2F;Java页面cout &lt;&lt; &quot;Java下载视频页面如下： &quot; &lt;&lt; endl;Java ja;ja.header();ja.footer();ja.left();ja.content();cout &lt;&lt; &quot;--------------------&quot; &lt;&lt; endl;&#x2F;&#x2F;Python页面cout &lt;&lt; &quot;Python下载视频页面如下： &quot; &lt;&lt; endl;Python py;py.header();py.footer();py.left();py.content();cout &lt;&lt; &quot;--------------------&quot; &lt;&lt; endl;&#x2F;&#x2F;C++页面cout &lt;&lt; &quot;C++下载视频页面如下： &quot; &lt;&lt; endl;CPP cp;cp.header();cp.footer();cp.left();cp.content();&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>继承实现：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;公共页面class BasePage&#123;public:void header()&#123;cout &lt;&lt; &quot;首页、公开课、登录、注册...（公共头部）&quot; &lt;&lt; endl;&#125;void footer()&#123;cout &lt;&lt; &quot;帮助中心、交流合作、站内地图...(公共底部)&quot; &lt;&lt; endl;&#125;void left()&#123;cout &lt;&lt; &quot;Java,Python,C++...(公共分类列表)&quot; &lt;&lt; endl;&#125;&#125;;&#x2F;&#x2F;Java页面class Java : public BasePage&#123;public:void content()&#123;cout &lt;&lt; &quot;JAVA学科视频&quot; &lt;&lt; endl;&#125;&#125;;&#x2F;&#x2F;Python页面class Python : public BasePage&#123;public:void content()&#123;cout &lt;&lt; &quot;Python学科视频&quot; &lt;&lt; endl;&#125;&#125;;&#x2F;&#x2F;C++页面class CPP : public BasePage&#123;public:void content()&#123;cout &lt;&lt; &quot;C++学科视频&quot; &lt;&lt; endl;&#125;&#125;;void test01()&#123;&#x2F;&#x2F;Java页面cout &lt;&lt; &quot;Java下载视频页面如下： &quot; &lt;&lt; endl;Java ja;ja.header();ja.footer();ja.left();ja.content();cout &lt;&lt; &quot;--------------------&quot; &lt;&lt; endl;&#x2F;&#x2F;Python页面cout &lt;&lt; &quot;Python下载视频页面如下： &quot; &lt;&lt; endl;Python py;py.header();py.footer();py.left();py.content();cout &lt;&lt; &quot;--------------------&quot; &lt;&lt; endl;&#x2F;&#x2F;C++页面cout &lt;&lt; &quot;C++下载视频页面如下： &quot; &lt;&lt; endl;CPP cp;cp.header();cp.footer();cp.left();cp.content();&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong></p><p>继承的好处：&#x3D;&#x3D;可以减少重复的代码&#x3D;&#x3D;</p><p>class A : public B; </p><p>A 类称为子类 或 派生类</p><p>B 类称为父类 或 基类</p><p><strong>派生类中的成员，包含两大部分</strong>：</p><p>一类是从基类继承过来的，一类是自己增加的成员。</p><p>从基类继承过过来的表现其共性，而新增的成员体现了其个性。</p><h4 id="4-6-2-继承方式"><a href="#4-6-2-继承方式" class="headerlink" title="4.6.2 继承方式"></a>4.6.2 继承方式</h4><p>继承的语法：<code>class 子类 : 继承方式  父类</code></p><p><strong>继承方式一共有三种：</strong></p><ul><li>公共继承</li><li>保护继承</li><li>私有继承</li></ul><p><img src="/assets/clip_image002.png" alt="img"></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Base1&#123;public: int m_A;protected:int m_B;private:int m_C;&#125;;&#x2F;&#x2F;公共继承class Son1 :public Base1&#123;   public:void func()&#123;m_A; &#x2F;&#x2F;可访问 public权限m_B; &#x2F;&#x2F;可访问 protected权限&#x2F;&#x2F;m_C; &#x2F;&#x2F;不可访问&#125;&#125;;void myClass()&#123;Son1 s1;s1.m_A; &#x2F;&#x2F;其他类只能访问到公共权限&#125;&#x2F;&#x2F;保护继承class Base2&#123;public:int m_A;protected:int m_B;private:int m_C;&#125;;class Son2:protected Base2&#123;public:void func()&#123;m_A; &#x2F;&#x2F;可访问 protected权限m_B; &#x2F;&#x2F;可访问 protected权限&#x2F;&#x2F;m_C; &#x2F;&#x2F;不可访问&#125;&#125;;void myClass2()&#123;Son2 s;&#x2F;&#x2F;s.m_A; &#x2F;&#x2F;不可访问&#125;&#x2F;&#x2F;私有继承class Base3&#123;public:int m_A;protected:int m_B;private:int m_C;&#125;;class Son3:private Base3&#123;public:void func()&#123;m_A; &#x2F;&#x2F;可访问 private权限m_B; &#x2F;&#x2F;可访问 private权限&#x2F;&#x2F;m_C; &#x2F;&#x2F;不可访问&#125;&#125;;class GrandSon3 :public Son3&#123;public:void func()&#123;&#x2F;&#x2F;Son3是私有继承，所以继承Son3的属性在GrandSon3中都无法访问到&#x2F;&#x2F;m_A;&#x2F;&#x2F;m_B;&#x2F;&#x2F;m_C;&#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-6-3-继承中的对象模型"><a href="#4-6-3-继承中的对象模型" class="headerlink" title="4.6.3 继承中的对象模型"></a>4.6.3 继承中的对象模型</h4><p><strong>问题：</strong>从父类继承过来的成员，哪些属于子类对象中？</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Base&#123;public:int m_A;protected:int m_B;private:int m_C; &#x2F;&#x2F;私有成员只是被隐藏了，但是还是会继承下去&#125;;&#x2F;&#x2F;公共继承class Son :public Base&#123;public:int m_D;&#125;;void test01()&#123;cout &lt;&lt; &quot;sizeof Son &#x3D; &quot; &lt;&lt; sizeof(Son) &lt;&lt; endl;&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用工具查看：</p><p><img src="/assets/1545881904150.png" alt="1545881904150"></p><p>打开工具窗口后，定位到当前CPP文件的盘符</p><p>然后输入： cl &#x2F;d1 reportSingleClassLayout查看的类名   所属文件名</p><p>效果如下图：</p><p><img src="/assets/1545882158050.png" alt="1545882158050"></p><blockquote><p>结论： 父类中私有成员也是被子类继承下去了，只是由编译器给隐藏后访问不到</p></blockquote><h4 id="4-6-4-继承中构造和析构顺序"><a href="#4-6-4-继承中构造和析构顺序" class="headerlink" title="4.6.4 继承中构造和析构顺序"></a>4.6.4 继承中构造和析构顺序</h4><p>子类继承父类后，当创建子类对象，也会调用父类的构造函数</p><p>问题：父类和子类的构造和析构顺序是谁先谁后？</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Base &#123;public:Base()&#123;cout &lt;&lt; &quot;Base构造函数!&quot; &lt;&lt; endl;&#125;~Base()&#123;cout &lt;&lt; &quot;Base析构函数!&quot; &lt;&lt; endl;&#125;&#125;;class Son : public Base&#123;public:Son()&#123;cout &lt;&lt; &quot;Son构造函数!&quot; &lt;&lt; endl;&#125;~Son()&#123;cout &lt;&lt; &quot;Son析构函数!&quot; &lt;&lt; endl;&#125;&#125;;void test01()&#123;&#x2F;&#x2F;继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反Son s;&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</p></blockquote><h4 id="4-6-5-继承同名成员处理方式"><a href="#4-6-5-继承同名成员处理方式" class="headerlink" title="4.6.5 继承同名成员处理方式"></a>4.6.5 继承同名成员处理方式</h4><p>问题：当子类与父类出现同名的成员，如何通过子类对象，访问到子类或父类中同名的数据呢？</p><ul><li>访问子类同名成员   直接访问即可</li><li>访问父类同名成员   需要加作用域</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Base &#123;public:Base()&#123;m_A &#x3D; 100;&#125;void func()&#123;cout &lt;&lt; &quot;Base - func()调用&quot; &lt;&lt; endl;&#125;void func(int a)&#123;cout &lt;&lt; &quot;Base - func(int a)调用&quot; &lt;&lt; endl;&#125;public:int m_A;&#125;;class Son : public Base &#123;public:Son()&#123;m_A &#x3D; 200;&#125;&#x2F;&#x2F;当子类与父类拥有同名的成员函数，子类会隐藏父类中所有版本的同名成员函数&#x2F;&#x2F;如果想访问父类中被隐藏的同名成员函数，需要加父类的作用域void func()&#123;cout &lt;&lt; &quot;Son - func()调用&quot; &lt;&lt; endl;&#125;public:int m_A;&#125;;void test01()&#123;Son s;cout &lt;&lt; &quot;Son下的m_A &#x3D; &quot; &lt;&lt; s.m_A &lt;&lt; endl;cout &lt;&lt; &quot;Base下的m_A &#x3D; &quot; &lt;&lt; s.Base::m_A &lt;&lt; endl;s.func();s.Base::func();s.Base::func(10);&#125;int main() &#123;test01();system(&quot;pause&quot;);return EXIT_SUCCESS;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ol><li><p>子类对象可以直接访问到子类中同名成员</p></li><li><p>子类对象加作用域可以访问到父类同名成员</p></li><li><p>当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数，加作用域可以访问到父类中同名函数</p></li></ol><h4 id="4-6-6-继承同名静态成员处理方式"><a href="#4-6-6-继承同名静态成员处理方式" class="headerlink" title="4.6.6 继承同名静态成员处理方式"></a>4.6.6 继承同名静态成员处理方式</h4><p>问题：继承中同名的静态成员在子类对象上如何进行访问？</p><p>静态成员和非静态成员出现同名，处理方式一致</p><ul><li>访问子类同名成员   直接访问即可</li><li>访问父类同名成员   需要加作用域</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Base &#123;public:static void func()&#123;cout &lt;&lt; &quot;Base - static void func()&quot; &lt;&lt; endl;&#125;static void func(int a)&#123;cout &lt;&lt; &quot;Base - static void func(int a)&quot; &lt;&lt; endl;&#125;static int m_A;&#125;;int Base::m_A &#x3D; 100;class Son : public Base &#123;public:static void func()&#123;cout &lt;&lt; &quot;Son - static void func()&quot; &lt;&lt; endl;&#125;static int m_A;&#125;;int Son::m_A &#x3D; 200;&#x2F;&#x2F;同名成员属性void test01()&#123;&#x2F;&#x2F;通过对象访问cout &lt;&lt; &quot;通过对象访问： &quot; &lt;&lt; endl;Son s;cout &lt;&lt; &quot;Son  下 m_A &#x3D; &quot; &lt;&lt; s.m_A &lt;&lt; endl;cout &lt;&lt; &quot;Base 下 m_A &#x3D; &quot; &lt;&lt; s.Base::m_A &lt;&lt; endl;&#x2F;&#x2F;通过类名访问cout &lt;&lt; &quot;通过类名访问： &quot; &lt;&lt; endl;cout &lt;&lt; &quot;Son  下 m_A &#x3D; &quot; &lt;&lt; Son::m_A &lt;&lt; endl;cout &lt;&lt; &quot;Base 下 m_A &#x3D; &quot; &lt;&lt; Son::Base::m_A &lt;&lt; endl;&#125;&#x2F;&#x2F;同名成员函数void test02()&#123;&#x2F;&#x2F;通过对象访问cout &lt;&lt; &quot;通过对象访问： &quot; &lt;&lt; endl;Son s;s.func();s.Base::func();cout &lt;&lt; &quot;通过类名访问： &quot; &lt;&lt; endl;Son::func();Son::Base::func();&#x2F;&#x2F;出现同名，子类会隐藏掉父类中所有同名成员函数，需要加作作用域访问Son::Base::func(100);&#125;int main() &#123;&#x2F;&#x2F;test01();test02();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：同名静态成员处理方式和非静态处理方式一样，只不过有两种访问的方式（通过对象 和 通过类名）</p><p>PS:说得好像非静态的就有两种以上一样</p></blockquote><h4 id="4-6-7-多继承语法"><a href="#4-6-7-多继承语法" class="headerlink" title="4.6.7 多继承语法"></a>4.6.7 多继承语法</h4><p>C++允许<strong>一个类继承多个类</strong></p><p>语法：<code> class 子类 ：继承方式 父类1 ， 继承方式 父类2...</code></p><p>多继承可能会引发父类中有同名成员出现，需要加作用域区分</p><p><strong>C++实际开发中不建议用多继承</strong></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Base1 &#123;public:Base1()&#123;m_A &#x3D; 100;&#125;public:int m_A;&#125;;class Base2 &#123;public:Base2()&#123;m_A &#x3D; 200;  &#x2F;&#x2F;开始是m_B 不会出问题，但是改为mA就会出现不明确&#125;public:int m_A;&#125;;&#x2F;&#x2F;语法：class 子类：继承方式 父类1 ，继承方式 父类2 class Son : public Base2, public Base1 &#123;public:Son()&#123;m_C &#x3D; 300;m_D &#x3D; 400;&#125;public:int m_C;int m_D;&#125;;&#x2F;&#x2F;多继承容易产生成员同名的情况&#x2F;&#x2F;通过使用类名作用域可以区分调用哪一个基类的成员void test01()&#123;Son s;cout &lt;&lt; &quot;sizeof Son &#x3D; &quot; &lt;&lt; sizeof(s) &lt;&lt; endl;cout &lt;&lt; s.Base1::m_A &lt;&lt; endl;cout &lt;&lt; s.Base2::m_A &lt;&lt; endl;&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结： 多继承中如果父类中出现了同名情况，子类使用时候要加作用域</p></blockquote><h4 id="4-6-8-菱形继承"><a href="#4-6-8-菱形继承" class="headerlink" title="4.6.8 菱形继承"></a>4.6.8 菱形继承</h4><p><strong>菱形继承概念：</strong></p><p>​两个派生类继承同一个基类</p><p>​又有某个类同时继承者两个派生类</p><p>​这种继承被称为菱形继承，或者钻石继承</p><p><strong>典型的菱形继承案例：</strong></p><p><img src="/assets/clip_image002.jpg" alt="IMG_256"></p><p><strong>菱形继承问题：</strong></p><ol><li><pre><code>羊继承了动物的数据，驼同样继承了动物的数据，当草泥马使用数据时，就会产生二义性。</code></pre></li><li><p>草泥马继承自动物的数据继承了两份，其实我们应该清楚，这份数据我们只需要一份就可以。</p></li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Animal&#123;public:int m_Age;&#125;;&#x2F;&#x2F;继承前加virtual关键字后，变为虚继承&#x2F;&#x2F;此时公共的父类Animal称为虚基类class Sheep : virtual public Animal &#123;&#125;;class Tuo   : virtual public Animal &#123;&#125;;class SheepTuo : public Sheep, public Tuo &#123;&#125;;void test01()&#123;SheepTuo st;st.Sheep::m_Age &#x3D; 100;st.Tuo::m_Age &#x3D; 200;&#x2F;&#x2F;其实就是使用虚继承的时候，当有相同的属性的时候，系统默认把所有的属性当作一个处理，这是只有当虚继承才有的特性cout &lt;&lt; &quot;st.Sheep::m_Age &#x3D; &quot; &lt;&lt; st.Sheep::m_Age &lt;&lt; endl;cout &lt;&lt; &quot;st.Tuo::m_Age &#x3D; &quot; &lt;&lt;  st.Tuo::m_Age &lt;&lt; endl;cout &lt;&lt; &quot;st.m_Age &#x3D; &quot; &lt;&lt; st.m_Age &lt;&lt; endl;&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>菱形继承带来的主要问题是子类继承两份相同的数据，导致资源浪费以及毫无意义</li><li><strong>利用虚继承可以解决菱形继承问题</strong></li><li><strong>注意和后面的虚函数不要弄混</strong></li></ul><h3 id="4-7-多态"><a href="#4-7-多态" class="headerlink" title="4.7  多态"></a>4.7  多态</h3><h4 id="4-7-1-多态的基本概念"><a href="#4-7-1-多态的基本概念" class="headerlink" title="4.7.1 多态的基本概念"></a>4.7.1 多态的基本概念</h4><p><strong>多态是C++面向对象三大特性之一</strong></p><p>多态分为两类</p><ul><li>静态多态: 函数重载 和 运算符重载属于静态多态，复用函数名</li><li>动态多态: 派生类和虚函数实现运行时多态</li></ul><p>静态多态和动态多态区别：</p><ul><li>静态多态的函数地址早绑定  -  编译阶段确定函数地址</li><li>动态多态的函数地址晚绑定  -  运行阶段确定函数地址</li></ul><p>下面通过案例进行讲解多态</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Animal&#123;public:&#x2F;&#x2F;Speak函数就是虚函数&#x2F;&#x2F;函数前面加上virtual关键字，变成虚函数，那么编译器在编译的时候就不能确定函数调用了。virtual void speak()&#123;cout &lt;&lt; &quot;动物在说话&quot; &lt;&lt; endl;&#125;&#125;;class Cat :public Animal&#123;public:void speak()&#123;cout &lt;&lt; &quot;小猫在说话&quot; &lt;&lt; endl;&#125;&#125;;class Dog :public Animal&#123;public:void speak()&#123;cout &lt;&lt; &quot;小狗在说话&quot; &lt;&lt; endl;&#125;&#125;;&#x2F;&#x2F;我们希望传入什么对象，那么就调用什么对象的函数&#x2F;&#x2F;如果函数地址在编译阶段就能确定，那么静态联编&#x2F;&#x2F;如果函数地址在运行阶段才能确定，就是动态联编void DoSpeak(Animal &amp; animal)&#123;animal.speak();&#125;&#x2F;&#x2F;&#x2F;&#x2F;多态满足条件： &#x2F;&#x2F;1、有继承关系&#x2F;&#x2F;2、子类重写父类中的虚函数&#x2F;&#x2F;多态使用：&#x2F;&#x2F;父类指针或引用指向子类对象void test01()&#123;Cat cat;DoSpeak(cat);Dog dog;DoSpeak(dog);&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><p>多态满足条件</p><ul><li>有继承关系</li><li>子类重写父类中的虚函数</li></ul><p>多态使用条件**&#x2F;&#x2F;有点意思**</p><ul><li>父类指针或引用指向子类对象</li></ul><p>重写：函数返回值类型  函数名 参数列表 完全一致称为重写</p><h4 id="4-7-2-多态案例一-计算器类"><a href="#4-7-2-多态案例一-计算器类" class="headerlink" title="4.7.2 多态案例一-计算器类"></a>4.7.2 多态案例一-计算器类</h4><p>案例描述：</p><p>分别利用普通写法和多态技术，设计实现两个操作数进行运算的计算器类</p><p>多态的优点：</p><ul><li>代码组织结构清晰</li><li>可读性强</li><li>利于前期和后期的扩展以及维护</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;普通实现class Calculator &#123;public:int getResult(string oper)&#123;if (oper &#x3D;&#x3D; &quot;+&quot;) &#123;return m_Num1 + m_Num2;&#125;else if (oper &#x3D;&#x3D; &quot;-&quot;) &#123;return m_Num1 - m_Num2;&#125;else if (oper &#x3D;&#x3D; &quot;*&quot;) &#123;return m_Num1 * m_Num2;&#125;&#x2F;&#x2F;如果要提供新的运算，需要修改源码&#125;public:int m_Num1;int m_Num2;&#125;;void test01()&#123;&#x2F;&#x2F;普通实现测试Calculator c;c.m_Num1 &#x3D; 10;c.m_Num2 &#x3D; 10;cout &lt;&lt; c.m_Num1 &lt;&lt; &quot; + &quot; &lt;&lt; c.m_Num2 &lt;&lt; &quot; &#x3D; &quot; &lt;&lt; c.getResult(&quot;+&quot;) &lt;&lt; endl;cout &lt;&lt; c.m_Num1 &lt;&lt; &quot; - &quot; &lt;&lt; c.m_Num2 &lt;&lt; &quot; &#x3D; &quot; &lt;&lt; c.getResult(&quot;-&quot;) &lt;&lt; endl;cout &lt;&lt; c.m_Num1 &lt;&lt; &quot; * &quot; &lt;&lt; c.m_Num2 &lt;&lt; &quot; &#x3D; &quot; &lt;&lt; c.getResult(&quot;*&quot;) &lt;&lt; endl;&#125;&#x2F;&#x2F;多态实现&#x2F;&#x2F;抽象计算器类&#x2F;&#x2F;多态优点：代码组织结构清晰，可读性强，利于前期和后期的扩展以及维护class AbstractCalculator&#123;public :virtual int getResult()&#123;return 0;&#125;int m_Num1;int m_Num2;&#125;;&#x2F;&#x2F;加法计算器class AddCalculator :public AbstractCalculator&#123;public:int getResult()&#123;return m_Num1 + m_Num2;&#125;&#125;;&#x2F;&#x2F;减法计算器class SubCalculator :public AbstractCalculator&#123;public:int getResult()&#123;return m_Num1 - m_Num2;&#125;&#125;;&#x2F;&#x2F;乘法计算器class MulCalculator :public AbstractCalculator&#123;public:int getResult()&#123;return m_Num1 * m_Num2;&#125;&#125;;void test02()&#123;&#x2F;&#x2F;创建加法计算器AbstractCalculator *abc &#x3D; new AddCalculator;abc-&gt;m_Num1 &#x3D; 10;abc-&gt;m_Num2 &#x3D; 10;cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; &quot; + &quot; &lt;&lt; abc-&gt;m_Num2 &lt;&lt; &quot; &#x3D; &quot; &lt;&lt; abc-&gt;getResult() &lt;&lt; endl;delete abc;  &#x2F;&#x2F;用完了记得销毁&#x2F;&#x2F;创建减法计算器abc &#x3D; new SubCalculator;abc-&gt;m_Num1 &#x3D; 10;abc-&gt;m_Num2 &#x3D; 10;cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; &quot; - &quot; &lt;&lt; abc-&gt;m_Num2 &lt;&lt; &quot; &#x3D; &quot; &lt;&lt; abc-&gt;getResult() &lt;&lt; endl;delete abc;  &#x2F;&#x2F;创建乘法计算器abc &#x3D; new MulCalculator;abc-&gt;m_Num1 &#x3D; 10;abc-&gt;m_Num2 &#x3D; 10;cout &lt;&lt; abc-&gt;m_Num1 &lt;&lt; &quot; * &quot; &lt;&lt; abc-&gt;m_Num2 &lt;&lt; &quot; &#x3D; &quot; &lt;&lt; abc-&gt;getResult() &lt;&lt; endl;delete abc;&#125;int main() &#123;&#x2F;&#x2F;test01();test02();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>总结：C++开发提倡利用多态设计程序架构，因为多态优点很多</p></blockquote><h4 id="4-7-3-纯虚函数和抽象类"><a href="#4-7-3-纯虚函数和抽象类" class="headerlink" title="4.7.3 纯虚函数和抽象类"></a>4.7.3 纯虚函数和抽象类</h4><p>在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容</p><p>因此可以将虚函数改为<strong>纯虚函数</strong></p><p>纯虚函数语法：<code>virtual 返回值类型 函数名 （参数列表）= 0 ;</code></p><p>当类中有了纯虚函数，这个类也称为&#x3D;&#x3D;抽象类&#x3D;&#x3D;</p><p><strong>抽象类特点</strong>：</p><ul><li>无法实例化对象</li><li>子类必须<strong>重写抽象类中的纯虚函数</strong>，否则也属于抽象类</li></ul><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Base&#123;public:virtual void func() &#x3D; 0;&#x2F;&#x2F;纯虚函数&#x2F;&#x2F;类中只要有一个纯虚函数就称为抽象类&#x2F;&#x2F;抽象类无法实例化对象&#x2F;&#x2F;子类必须重写父类中的纯虚函数，否则也属于抽象类&#125;;class Son :public Base&#123;public:virtual void func() &#123;cout &lt;&lt; &quot;func调用&quot; &lt;&lt; endl;&#125;;&#125;;void test01()&#123;Base * base &#x3D; NULL;&#x2F;&#x2F;base &#x3D; new Base; &#x2F;&#x2F; 错误，抽象类无法实例化对象，但是可以建指针，让他指向其他的类就行，比如sonbase &#x3D; new Son;base-&gt;func();delete base;&#x2F;&#x2F;记得销毁&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-7-4-多态案例二-制作饮品"><a href="#4-7-4-多态案例二-制作饮品" class="headerlink" title="4.7.4 多态案例二-制作饮品"></a>4.7.4 多态案例二-制作饮品</h4><p><strong>案例描述：</strong></p><p>制作饮品的大致流程为：煮水 -  冲泡 - 倒入杯中 - 加入辅料</p><p>利用多态技术实现本案例，提供抽象制作饮品基类，提供子类制作咖啡和茶叶</p><p><img src="/assets/1545985945198.png" alt="1545985945198"></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;抽象制作饮品class AbstractDrinking &#123;public:&#x2F;&#x2F;烧水virtual void Boil() &#x3D; 0;&#x2F;&#x2F;冲泡virtual void Brew() &#x3D; 0;&#x2F;&#x2F;倒入杯中virtual void PourInCup() &#x3D; 0;&#x2F;&#x2F;加入辅料virtual void PutSomething() &#x3D; 0;&#x2F;&#x2F;规定流程void MakeDrink() &#123;Boil();Brew();PourInCup();PutSomething();&#125;&#125;;&#x2F;&#x2F;制作咖啡class Coffee : public AbstractDrinking &#123;public:&#x2F;&#x2F;烧水virtual void Boil() &#123;cout &lt;&lt; &quot;煮农夫山泉!&quot; &lt;&lt; endl;&#125;&#x2F;&#x2F;冲泡virtual void Brew() &#123;cout &lt;&lt; &quot;冲泡咖啡!&quot; &lt;&lt; endl;&#125;&#x2F;&#x2F;倒入杯中virtual void PourInCup() &#123;cout &lt;&lt; &quot;将咖啡倒入杯中!&quot; &lt;&lt; endl;&#125;&#x2F;&#x2F;加入辅料virtual void PutSomething() &#123;cout &lt;&lt; &quot;加入牛奶!&quot; &lt;&lt; endl;&#125;&#125;;&#x2F;&#x2F;制作茶水class Tea : public AbstractDrinking &#123;public:&#x2F;&#x2F;烧水virtual void Boil() &#123;cout &lt;&lt; &quot;煮自来水!&quot; &lt;&lt; endl;&#125;&#x2F;&#x2F;冲泡virtual void Brew() &#123;cout &lt;&lt; &quot;冲泡茶叶!&quot; &lt;&lt; endl;&#125;&#x2F;&#x2F;倒入杯中virtual void PourInCup() &#123;cout &lt;&lt; &quot;将茶水倒入杯中!&quot; &lt;&lt; endl;&#125;&#x2F;&#x2F;加入辅料virtual void PutSomething() &#123;cout &lt;&lt; &quot;加入枸杞!&quot; &lt;&lt; endl;&#125;&#125;;&#x2F;&#x2F;业务函数void DoWork(AbstractDrinking* drink) &#123;drink-&gt;MakeDrink();delete drink;&#125;void test01() &#123;DoWork(new Coffee);cout &lt;&lt; &quot;--------------&quot; &lt;&lt; endl;DoWork(new Tea);&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-7-5-虚析构和纯虚析构"><a href="#4-7-5-虚析构和纯虚析构" class="headerlink" title="4.7.5 虚析构和纯虚析构"></a>4.7.5 虚析构和纯虚析构</h4><p>多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时无法调用到子类的析构代码</p><p>解决方式：将父类中的析构函数改为<strong>虚析构</strong>或者<strong>纯虚析构</strong></p><p>虚析构和纯虚析构共性：</p><ul><li>可以解决父类指针释放子类对象</li><li>都需要有具体的函数实现</li></ul><p>虚析构和纯虚析构区别：</p><ul><li>如果是纯虚析构，该类属于抽象类，无法实例化对象</li></ul><p>虚析构语法：</p><p><code>virtual ~类名()&#123;&#125;</code></p><p>纯虚析构语法：</p><p><code> virtual ~类名() = 0;</code></p><p><code>类名::~类名()&#123;&#125;</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Animal &#123;public:Animal()&#123;cout &lt;&lt; &quot;Animal 构造函数调用！&quot; &lt;&lt; endl;&#125;virtual void Speak() &#x3D; 0;&#x2F;&#x2F;析构函数加上virtual关键字，变成虚析构函数&#x2F;&#x2F;virtual ~Animal()&#x2F;&#x2F;&#123;&#x2F;&#x2F;cout &lt;&lt; &quot;Animal虚析构函数调用！&quot; &lt;&lt; endl;&#x2F;&#x2F;&#125;virtual ~Animal() &#x3D; 0;&#125;;Animal::~Animal()&#123;cout &lt;&lt; &quot;Animal 纯虚析构函数调用！&quot; &lt;&lt; endl;&#125;&#x2F;&#x2F;和包含普通纯虚函数的类一样，包含了纯虚析构函数的类也是一个抽象类。不能够被实例化。class Cat : public Animal &#123;public:Cat(string name)&#123;cout &lt;&lt; &quot;Cat构造函数调用！&quot; &lt;&lt; endl;m_Name &#x3D; new string(name);&#x2F;&#x2F;这种方式非常巧妙，以建立指针，创建空间的方式，再让指针去指向这个空间，达到赋值的目的，虽然看不出有什么特殊功能，但相比有一些特殊用处，这里的m_Name被new string(name)赋值后，m_name就变成了指向name的指针，*m_name就有了具体的内容即为tom&#125;virtual void Speak()&#123;cout &lt;&lt; *m_Name &lt;&lt;  &quot;小猫在说话!&quot; &lt;&lt; endl;&#125;~Cat()&#123;cout &lt;&lt; &quot;Cat析构函数调用!&quot; &lt;&lt; endl;if (this-&gt;m_Name !&#x3D; NULL) &#123;delete m_Name;m_Name &#x3D; NULL;&#125;&#125;public:string *m_Name;&#125;;void test01()&#123;Animal *animal &#x3D; new Cat(&quot;Tom&quot;);animal-&gt;Speak();&#x2F;&#x2F;通过父类指针去释放，会导致子类对象可能清理不干净，造成内存泄漏&#x2F;&#x2F;怎么解决？给基类增加一个虚析构函数&#x2F;&#x2F;虚析构函数就是用来解决通过父类指针释放子类对象&#x2F;&#x2F;看不懂，之后再细看吧delete animal;&#125;   int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><p>​1. 虚析构或纯虚析构就是用来解决通过父类指针释放子类对象</p><p>​2. 如果子类中没有堆区数据，可以不写为虚析构或纯虚析构</p><p>​3. 拥有纯虚析构函数的类也属于抽象类</p><h4 id="4-7-6-多态案例三-电脑组装"><a href="#4-7-6-多态案例三-电脑组装" class="headerlink" title="4.7.6 多态案例三-电脑组装"></a>4.7.6 多态案例三-电脑组装</h4><p><strong>案例描述：</strong></p><p>电脑主要组成部件为 CPU（用于计算），显卡（用于显示），内存条（用于存储）</p><p>将每个零件封装出抽象基类，并且提供不同的厂商生产不同的零件，例如Intel厂商和Lenovo厂商</p><p>创建电脑类提供让电脑工作的函数，并且调用每个零件工作的接口</p><p>测试时组装三台不同的电脑进行工作</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;&#x2F;&#x2F;抽象CPU类class CPU&#123;public:&#x2F;&#x2F;抽象的计算函数virtual void calculate() &#x3D; 0;&#125;;&#x2F;&#x2F;抽象显卡类class VideoCard&#123;public:&#x2F;&#x2F;抽象的显示函数virtual void display() &#x3D; 0;&#125;;&#x2F;&#x2F;抽象内存条类class Memory&#123;public:&#x2F;&#x2F;抽象的存储函数virtual void storage() &#x3D; 0;&#125;;&#x2F;&#x2F;电脑类class Computer&#123;public:Computer(CPU * cpu, VideoCard * vc, Memory * mem)&#123;m_cpu &#x3D; cpu;m_vc &#x3D; vc;m_mem &#x3D; mem;&#125;&#x2F;&#x2F;提供工作的函数void work()&#123;&#x2F;&#x2F;让零件工作起来，调用接口m_cpu-&gt;calculate();m_vc-&gt;display();m_mem-&gt;storage();&#125;&#x2F;&#x2F;提供析构函数 释放3个电脑零件~Computer()&#123;&#x2F;&#x2F;释放CPU零件if (m_cpu !&#x3D; NULL)&#123;delete m_cpu;m_cpu &#x3D; NULL;&#125;&#x2F;&#x2F;释放显卡零件if (m_vc !&#x3D; NULL)&#123;delete m_vc;m_vc &#x3D; NULL;&#125;&#x2F;&#x2F;释放内存条零件if (m_mem !&#x3D; NULL)&#123;delete m_mem;m_mem &#x3D; NULL;&#125;&#125;private:CPU * m_cpu; &#x2F;&#x2F;CPU的零件指针VideoCard * m_vc; &#x2F;&#x2F;显卡零件指针Memory * m_mem; &#x2F;&#x2F;内存条零件指针&#125;;&#x2F;&#x2F;具体厂商&#x2F;&#x2F;Intel厂商class IntelCPU :public CPU&#123;public:virtual void calculate()&#123;cout &lt;&lt; &quot;Intel的CPU开始计算了！&quot; &lt;&lt; endl;&#125;&#125;;class IntelVideoCard :public VideoCard&#123;public:virtual void display()&#123;cout &lt;&lt; &quot;Intel的显卡开始显示了！&quot; &lt;&lt; endl;&#125;&#125;;class IntelMemory :public Memory&#123;public:virtual void storage()&#123;cout &lt;&lt; &quot;Intel的内存条开始存储了！&quot; &lt;&lt; endl;&#125;&#125;;&#x2F;&#x2F;Lenovo厂商class LenovoCPU :public CPU&#123;public:virtual void calculate()&#123;cout &lt;&lt; &quot;Lenovo的CPU开始计算了！&quot; &lt;&lt; endl;&#125;&#125;;class LenovoVideoCard :public VideoCard&#123;public:virtual void display()&#123;cout &lt;&lt; &quot;Lenovo的显卡开始显示了！&quot; &lt;&lt; endl;&#125;&#125;;class LenovoMemory :public Memory&#123;public:virtual void storage()&#123;cout &lt;&lt; &quot;Lenovo的内存条开始存储了！&quot; &lt;&lt; endl;&#125;&#125;;void test01()&#123;&#x2F;&#x2F;第一台电脑零件CPU * intelCpu &#x3D; new IntelCPU;VideoCard * intelCard &#x3D; new IntelVideoCard;Memory * intelMem &#x3D; new IntelMemory;cout &lt;&lt; &quot;第一台电脑开始工作：&quot; &lt;&lt; endl;&#x2F;&#x2F;创建第一台电脑Computer * computer1 &#x3D; new Computer(intelCpu, intelCard, intelMem);computer1-&gt;work();delete computer1;cout &lt;&lt; &quot;-----------------------&quot; &lt;&lt; endl;cout &lt;&lt; &quot;第二台电脑开始工作：&quot; &lt;&lt; endl;&#x2F;&#x2F;第二台电脑组装Computer * computer2 &#x3D; new Computer(new LenovoCPU, new LenovoVideoCard, new LenovoMemory);;computer2-&gt;work();delete computer2;cout &lt;&lt; &quot;-----------------------&quot; &lt;&lt; endl;cout &lt;&lt; &quot;第三台电脑开始工作：&quot; &lt;&lt; endl;&#x2F;&#x2F;第三台电脑组装Computer * computer3 &#x3D; new Computer(new LenovoCPU, new IntelVideoCard, new LenovoMemory);;computer3-&gt;work();delete computer3;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-文件操作"><a href="#5-文件操作" class="headerlink" title="5 文件操作"></a>5 文件操作</h2><p>程序运行时产生的数据都属于临时数据，程序一旦运行结束都会被释放</p><p>通过<strong>文件可以将数据持久化</strong></p><p>C++中对文件操作需要包含头文件 &#x3D;&#x3D;&lt; fstream &gt;&#x3D;&#x3D;</p><p>文件类型分为两种：</p><ol><li><strong>文本文件</strong>     -  文件以文本的<strong>ASCII码</strong>形式存储在计算机中</li><li><strong>二进制文件</strong> -  文件以文本的<strong>二进制</strong>形式存储在计算机中，用户一般不能直接读懂它们</li></ol><p>操作文件的三大类:</p><ol><li>ofstream：写操作</li><li>ifstream： 读操作</li><li>fstream ： 读写操作</li></ol><h3 id="5-1文本文件"><a href="#5-1文本文件" class="headerlink" title="5.1文本文件"></a>5.1文本文件</h3><h4 id="5-1-1写文件"><a href="#5-1-1写文件" class="headerlink" title="5.1.1写文件"></a>5.1.1写文件</h4><p>   写文件步骤如下：</p><ol><li><p>包含头文件   </p><p>  #include &lt;fstream&gt;</p></li><li><p>创建流对象  </p><p>ofstream ofs;</p></li><li><p>打开文件</p><p>ofs.open(“文件路径”,打开方式);</p></li><li><p>写数据</p><p>ofs &lt;&lt; “写入的数据”;</p></li><li><p>关闭文件</p><p>ofs.close();</p></li></ol><p>文件打开方式：</p><table><thead><tr><th>打开方式</th><th>解释</th></tr></thead><tbody><tr><td>ios::in</td><td>为读文件而打开文件</td></tr><tr><td>ios::out</td><td>为写文件而打开文件</td></tr><tr><td>ios::ate</td><td>初始位置：文件尾</td></tr><tr><td>ios::app</td><td>追加方式写文件</td></tr><tr><td>ios::trunc</td><td>如果文件存在先删除，再创建</td></tr><tr><td>ios::binary</td><td>二进制方式</td></tr></tbody></table><p><strong>注意：</strong> 文件打开方式可以配合使用，利用|操作符</p><p><strong>例如：</strong>用二进制方式写文件 <code>ios::binary |  ios:: out</code></p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;fstream&gt;void test01()&#123;ofstream ofs;ofs.open(&quot;test.txt&quot;, ios::out);ofs &lt;&lt; &quot;姓名：张三&quot; &lt;&lt; endl;ofs &lt;&lt; &quot;性别：男&quot; &lt;&lt; endl;ofs &lt;&lt; &quot;年龄：18&quot; &lt;&lt; endl;ofs.close();&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>文件操作必须包含头文件 fstream</li><li>读文件可以利用 ofstream  ，或者fstream类</li><li>打开文件时候需要指定操作文件的路径，以及打开方式</li><li>利用&lt;&lt;可以向文件中写数据</li><li>操作完毕，要关闭文件</li></ul><h4 id="5-1-2读文件"><a href="#5-1-2读文件" class="headerlink" title="5.1.2读文件"></a>5.1.2读文件</h4><p>读文件与写文件步骤相似，但是读取方式相对于比较多</p><p>读文件步骤如下：</p><ol><li><p>包含头文件   </p><p>  #include &lt;fstream&gt;</p></li><li><p>创建流对象  </p><p>ifstream ifs;</p></li><li><p>打开文件并判断文件是否打开成功</p><p>ifs.open(“文件路径”,打开方式);</p></li><li><p>读数据</p><p>四种方式读取</p></li><li><p>关闭文件</p><p>ifs.close();</p></li></ol><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;fstream&gt;#include &lt;string&gt;void test01()&#123;ifstream ifs;ifs.open(&quot;test.txt&quot;, ios::in);if (!ifs.is_open())&#123;cout &lt;&lt; &quot;文件打开失败&quot; &lt;&lt; endl;return;&#125;&#x2F;&#x2F;第一种方式&#x2F;&#x2F;char buf[1024] &#x3D; &#123; 0 &#125;;&#x2F;&#x2F;while (ifs &gt;&gt; buf)&#x2F;&#x2F;&#123;&#x2F;&#x2F;cout &lt;&lt; buf &lt;&lt; endl;&#x2F;&#x2F;&#125;&#x2F;&#x2F;第二种&#x2F;&#x2F;char buf[1024] &#x3D; &#123; 0 &#125;;&#x2F;&#x2F;while (ifs.getline(buf,sizeof(buf)))&#x2F;&#x2F;&#123;&#x2F;&#x2F;cout &lt;&lt; buf &lt;&lt; endl;&#x2F;&#x2F;&#125;&#x2F;&#x2F;第三种&#x2F;&#x2F;string buf;&#x2F;&#x2F;while (getline(ifs, buf))&#x2F;&#x2F;&#123;&#x2F;&#x2F;cout &lt;&lt; buf &lt;&lt; endl;&#x2F;&#x2F;&#125;char c;while ((c &#x3D; ifs.get()) !&#x3D; EOF)&#123;cout &lt;&lt; c;&#125;ifs.close();&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>读文件可以利用 ifstream  ，或者fstream类</li><li>利用is_open函数可以判断文件是否打开成功</li><li>close 关闭文件</li></ul><h3 id="5-2-二进制文件"><a href="#5-2-二进制文件" class="headerlink" title="5.2 二进制文件"></a>5.2 二进制文件</h3><p>以二进制的方式对文件进行读写操作</p><p>打开方式要指定为 &#x3D;&#x3D;ios::binary&#x3D;&#x3D;</p><h4 id="5-2-1-写文件"><a href="#5-2-1-写文件" class="headerlink" title="5.2.1 写文件"></a>5.2.1 写文件</h4><p>二进制方式写文件主要利用流对象调用成员函数write</p><p>函数原型 ：<code>ostream&amp; write(const char * buffer,int len);</code></p><p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p><p><strong>示例：</strong></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;fstream&gt;#include &lt;string&gt;class Person&#123;public:char m_Name[64];int m_Age;&#125;;&#x2F;&#x2F;二进制文件  写文件void test01()&#123;&#x2F;&#x2F;1、包含头文件&#x2F;&#x2F;2、创建输出流对象ofstream ofs(&quot;person.txt&quot;, ios::out | ios::binary);&#x2F;&#x2F;3、打开文件&#x2F;&#x2F;ofs.open(&quot;person.txt&quot;, ios::out | ios::binary);Person p &#x3D; &#123;&quot;张三&quot;  , 18&#125;;&#x2F;&#x2F;4、写文件ofs.write((const char *)&amp;p, sizeof(p));&#x2F;&#x2F;啥呀，套娃这么套&#x2F;&#x2F;5、关闭文件ofs.close();&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ul><li>文件输出流对象 可以通过write函数，以二进制方式写数据</li></ul><h4 id="5-2-2-读文件"><a href="#5-2-2-读文件" class="headerlink" title="5.2.2 读文件"></a>5.2.2 读文件</h4><p>二进制方式读文件主要利用流对象调用成员函数read</p><p>函数原型：<code>istream&amp; read(char *buffer,int len);</code></p><p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p><p>示例：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;fstream&gt;#include &lt;string&gt;class Person&#123;public:char m_Name[64];int m_Age;&#125;;void test01()&#123;ifstream ifs(&quot;person.txt&quot;, ios::in | ios::binary);if (!ifs.is_open())&#123;cout &lt;&lt; &quot;文件打开失败&quot; &lt;&lt; endl;&#125;Person p;ifs.read((char *)&amp;p, sizeof(p));&#x2F;&#x2F;取其地址将其指针化cout &lt;&lt; &quot;姓名： &quot; &lt;&lt; p.m_Name &lt;&lt; &quot; 年龄： &quot; &lt;&lt; p.m_Age &lt;&lt; endl;&#125;int main() &#123;test01();system(&quot;pause&quot;);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>文件输入流对象 可以通过read函数，以二进制方式读数据</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Learning Notes</title>
      <link href="/2024/03/04/python-learning-notes/"/>
      <url>/2024/03/04/python-learning-notes/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"IPO程序编写，input，process，output"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"可以使用多种引号，后面不用加分号，可以类似cout一样多重输出"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">54</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"python3以Unicode为内部字符编码，一共2的16次方位数"</span><span class="token punctuation">)</span>fp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'note.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"一个尝试"</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>fp<span class="token punctuation">)</span>fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"nih"</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">"xcc"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ddd"</span><span class="token operator">+</span><span class="token string">"链接符的使用只能是字符串之间"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32 Learning Notes</title>
      <link href="/2024/02/28/stm32-learning-notes/"/>
      <url>/2024/02/28/stm32-learning-notes/</url>
      
        <content type="html"><![CDATA[<h2 id="1-配置文件介绍"><a href="#1-配置文件介绍" class="headerlink" title="1 配置文件介绍"></a>1 配置文件介绍</h2><p><a href="https://www.bilibili.com/opus/814075999736037492?spm_id_from=333.999.0.0">STM32入门教程-2023版 细致讲解 中文字幕 - 哔哩哔哩 (bilibili.com)</a></p><h3 id="1-1-start"><a href="#1-1-start" class="headerlink" title="1.1 start"></a>1.1 start</h3><p><code>\STM32入门教程资料\固件库\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">startup_stm32f10x_md.s   <span class="token comment">#启动文件</span>system_stm32f10x.c <span class="token comment">#配置时钟</span>system_stm32f10x.hstm32f10x.h <span class="token comment">#外设寄存器文件，类似reg52.h，描述寄存器与地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>\STM32入门教程资料\固件库\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\CMSIS\CM3\CoreSupport</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">core_cm3.c <span class="token comment">#内核寄存器描述</span>core_cm3.h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-2-library-标准外设驱动库函数"><a href="#1-2-library-标准外设驱动库函数" class="headerlink" title="1.2 library 标准外设驱动库函数"></a>1.2 library 标准外设驱动库函数</h3><p><code>\STM32入门教程资料\固件库\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver</code></p><p>src和inc文件里面的所有文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mics.c  <span class="token comment">#内核的库函数，其他是内核外的库函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-3-user"><a href="#1-3-user" class="headerlink" title="1.3 user"></a>1.3 user</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">stm32f10x_conf.h    <span class="token comment">#配置库函数头文件包含关系，检查函数定义</span>stm32f10x_it.c放中断函数stm32f10x_it.h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-4-复制字符串、包含外设库"><a href="#1-4-复制字符串、包含外设库" class="headerlink" title="1.4 复制字符串、包含外设库"></a>1.4 复制字符串、包含外设库</h3><p><img src="https://i1.hdslb.com/bfs/note/10928388fe2ccd500b9ac4383da035fb09f78b94.png@1054w_772h.webp" alt="img"></p><p><img src="https://i1.hdslb.com/bfs/note/17cd28850cab71630152b509b117be6a7f145d67.png@1066w_780h.webp" alt="img"></p><p><img src="https://i1.hdslb.com/bfs/note/942541aa157abb163ebfb5449a729b553c47725e.png@1140w_748h.webp" alt="img"></p><h2 id="2-外设学习"><a href="#2-外设学习" class="headerlink" title="2 外设学习"></a>2 外设学习</h2><h3 id="2-1-GPIO"><a href="#2-1-GPIO" class="headerlink" title="2.1 GPIO"></a>2.1 GPIO</h3><p>io口不初始化，默认浮空输入</p><table><thead><tr><th align="left">八种模式</th><th align="center"><strong>模式名称</strong></th><th align="center"><strong>性质</strong></th><th align="center"><strong>特征</strong></th></tr></thead><tbody><tr><td align="left">GPIO_Mode_IN_FLOATING</td><td align="center">浮空输入</td><td align="center">数字输入</td><td align="center">可读取引脚电平，若引脚悬空，则电平不确定</td></tr><tr><td align="left">GPIO_Mode_IPU</td><td align="center">上拉输入</td><td align="center">数字输入</td><td align="center">可读取引脚电平，内部连接上拉电阻，悬空时默认高电平</td></tr><tr><td align="left">GPIO_Mode_IPD</td><td align="center">下拉输入</td><td align="center">数字输入</td><td align="center">可读取引脚电平，内部连接下拉电阻，悬空时默认低电平</td></tr><tr><td align="left">GPIO_Mode_AIN</td><td align="center">模拟输入</td><td align="center">模拟输入</td><td align="center">GPIO无效，引脚直接接入内部ADC</td></tr><tr><td align="left">GPIO_Mode_Out_OD</td><td align="center">开漏输出</td><td align="center">数字输出</td><td align="center">可输出引脚电平，高电平为高阻态，低电平接VSS</td></tr><tr><td align="left">GPIO_Mode_Out_PP</td><td align="center">推挽输出</td><td align="center">数字输出</td><td align="center">可输出引脚电平，高电平接VDD，低电平接VSS</td></tr><tr><td align="left">GPIO_Mode_AF_OD</td><td align="center">复用开漏输出</td><td align="center">数字输出</td><td align="center">由片上外设控制，高电平为高阻态，低电平接VSS</td></tr><tr><td align="left">GPIO_Mode_AF_PP</td><td align="center">复用推挽输出</td><td align="center">数字输出</td><td align="center">由片上外设控制，高电平接VDD，低电平接VSS</td></tr></tbody></table><h4 id="2-1-1-输出"><a href="#2-1-1-输出" class="headerlink" title="2.1.1 输出"></a>2.1.1 输出</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*开启时钟*/</span><span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOA<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开启GPIOA的时钟</span><span class="token comment">//使用各个外设前必须开启时钟，否则对外设的操作无效</span><span class="token comment">/*GPIO初始化*/</span>GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span><span class="token comment">//定义结构体变量</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_Out_PP<span class="token punctuation">;</span><span class="token comment">//GPIO模式，赋值为推挽输出模式</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_0<span class="token punctuation">;</span><span class="token comment">//GPIO引脚，赋值为第0号引脚</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span><span class="token comment">//GPIO速度，赋值为50MHz</span><span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将赋值后的构体变量传递给GPIO_Init函数</span><span class="token comment">//函数内部会自动根据结构体的参数配置相应寄存器</span><span class="token comment">//实现GPIOA的初始化</span><span class="token comment">/*方法1：GPIO_ResetBits设置低电平，GPIO_SetBits设置高电平*/</span><span class="token function">GPIO_ResetBits</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> GPIO_Pin_0<span class="token operator">|</span>GPIO_Pin_1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将PA0,PA1引脚设置为低电平,可“与”计算</span><span class="token function">GPIO_SetBits</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> GPIO_Pin_0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将PA0引脚设置为高电平</span><span class="token comment">/*方法2：GPIO_WriteBit设置低/高电平，由Bit_RESET/Bit_SET指定*/</span><span class="token function">GPIO_WriteBit</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> GPIO_Pin_0<span class="token punctuation">,</span> Bit_RESET<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将PA0引脚设置为低电平</span><span class="token function">GPIO_WriteBit</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> GPIO_Pin_0<span class="token punctuation">,</span> Bit_SET<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将PA0引脚设置为高电平</span><span class="token comment">/*方法3：GPIO_WriteBit设置低/高电平，由数据0/1指定，数据需要强转为BitAction类型*/</span><span class="token function">GPIO_WriteBit</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> GPIO_Pin_0<span class="token punctuation">,</span> <span class="token punctuation">(</span>BitAction<span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将PA0引脚设置为低电平</span><span class="token function">GPIO_WriteBit</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> GPIO_Pin_0<span class="token punctuation">,</span> <span class="token punctuation">(</span>BitAction<span class="token punctuation">)</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将PA0引脚设置为高电平</span><span class="token comment">/*使用GPIO_Write，同时设置GPIOA所有引脚的高低电平，实现LED流水灯*/</span><span class="token function">GPIO_Write</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">~</span><span class="token number">0x0001</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0000 0000 0000 0001，PA0引脚为低电平，其他引脚均为高电平，注意数据有按位取反</span><span class="token function">Delay_ms</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//延时100ms</span><span class="token function">GPIO_Write</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">~</span><span class="token number">0x0002</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0000 0000 0000 0010，PA1引脚为低电平，其他引脚均为高电平</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-1-1-输入"><a href="#2-1-1-输入" class="headerlink" title="2.1.1 输入"></a>2.1.1 输入</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*开启时钟*/</span><span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOB<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开启GPIOB的时钟</span><span class="token comment">/*GPIO初始化*/</span>GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_IPU<span class="token punctuation">;</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_1 <span class="token operator">|</span> GPIO_Pin_11<span class="token punctuation">;</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span><span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将PB1和PB11引脚初始化为上拉输入</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GPIO_ReadInputDataBit</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> GPIO_Pin_1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//读PB1输入寄存器的状态，如果为0，则代表按键1按下</span><span class="token punctuation">&#123;</span>    <span class="token function">Delay_ms</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//延时消抖</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">GPIO_ReadInputDataBit</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> GPIO_Pin_1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等待按键松手</span>    <span class="token function">Delay_ms</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//延时消抖</span>    KeyNum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//置键码为1</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="OLED调试"><a href="#OLED调试" class="headerlink" title="OLED调试"></a>OLED调试</h3><p>暂无</p><p>•68个可屏蔽中断通道，包含EXTI、TIM、ADC、USART、SPI、I2C、RTC等多个外设</p><h3 id="2-2-EXIT"><a href="#2-2-EXIT" class="headerlink" title="2.2 EXIT"></a>2.2 EXIT</h3><p>•NVIC的中断优先级由优先级寄存器的4位（0~15）决定，这4位可以进行切分，分为高n位的抢占优先级和低4-n位的响应优先级</p><p>•抢占优先级高的可以中断嵌套，响应优先级高的可以优先排队，抢占优先级和响应优先级均相同的按中断号排队</p><table><thead><tr><th><strong>分组方式</strong></th><th><strong>抢占优先级</strong></th><th><strong>响应优先级</strong></th></tr></thead><tbody><tr><td>分组0</td><td>0位，取值为0</td><td>4位，取值为0~15</td></tr><tr><td>分组1</td><td>1位，取值为0~1</td><td>3位，取值为0~7</td></tr><tr><td>分组2</td><td>2位，取值为0~3</td><td>2位，取值为0~3</td></tr><tr><td>分组3</td><td>3位，取值为0~7</td><td>1位，取值为0~1</td></tr><tr><td>分组4</td><td>4位，取值为0~15</td><td>0位，取值为0</td></tr></tbody></table><p>主要函数介绍</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">EXTI_DeInit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用于将外部中断模块恢复到初始状态。</span><span class="token keyword">void</span> <span class="token function">EXTI_Init</span><span class="token punctuation">(</span>EXTI_InitTypeDef<span class="token operator">*</span> EXTI_InitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用给定的配置初始化外部中断。</span><span class="token keyword">void</span> <span class="token function">EXTI_StructInit</span><span class="token punctuation">(</span>EXTI_InitTypeDef<span class="token operator">*</span> EXTI_InitStruct<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化指定的外部中断配置结构体。</span><span class="token keyword">void</span> <span class="token function">EXTI_GenerateSWInterrupt</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> EXTI_Line<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//产生软件触发的外部中断。</span><span class="token comment">//在主函数内查看，触发了标志位不一定会挂起中断，这是区别</span>FlagStatus <span class="token function">EXTI_GetFlagStatus</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> EXTI_Line<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*功能：获取指定外部中断线的触发标志位状态。      返回值：标志位状态，可以是SET或者RESET。*/</span><span class="token keyword">void</span> <span class="token function">EXTI_ClearFlag</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> EXTI_Line<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清除指定外部中断线的触发标志位。</span><span class="token comment">//在中断函数内查看，此时可以查看是否已经开启了中断</span>ITStatus <span class="token function">EXTI_GetITStatus</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> EXTI_Line<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*功能：获取指定外部中断线的中断挂起状态。  返回值：中断挂起状态，可以是SET或者RESET。*/</span><span class="token keyword">void</span> <span class="token function">EXTI_ClearITPendingBit</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> EXTI_Line<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清除指定外部中断线的中断挂起位。  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*开启时钟*/</span><span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_AFIO<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开启AFIO的时钟，外部中断必须开启AFIO的时钟</span><span class="token comment">/*AFIO选择中断引脚*/</span><span class="token function">GPIO_EXTILineConfig</span><span class="token punctuation">(</span>GPIO_PortSourceGPIOB<span class="token punctuation">,</span> GPIO_PinSource14<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将外部中断的14号线映射到GPIOB，即选择PB14为外部中断引脚</span><span class="token comment">/*EXTI初始化*/</span>EXTI_InitTypeDef EXTI_InitStructure<span class="token punctuation">;</span><span class="token comment">//定义结构体变量</span>EXTI_InitStructure<span class="token punctuation">.</span>EXTI_Line <span class="token operator">=</span> EXTI_Line14<span class="token punctuation">;</span><span class="token comment">//选择配置外部中断的14号线</span>EXTI_InitStructure<span class="token punctuation">.</span>EXTI_LineCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span><span class="token comment">//指定外部中断线使能</span>EXTI_InitStructure<span class="token punctuation">.</span>EXTI_Mode <span class="token operator">=</span> EXTI_Mode_Interrupt<span class="token punctuation">;</span><span class="token comment">//指定外部中断线为中断模式</span>EXTI_InitStructure<span class="token punctuation">.</span>EXTI_Trigger <span class="token operator">=</span> EXTI_Trigger_Falling<span class="token punctuation">;</span><span class="token comment">//指定外部中断线为下降沿触发</span><span class="token function">EXTI_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>EXTI_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将结构体变量交给EXTI_Init，配置EXTI外设</span><span class="token comment">/*NVIC中断分组*/</span><span class="token function">NVIC_PriorityGroupConfig</span><span class="token punctuation">(</span>NVIC_PriorityGroup_2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//配置NVIC为分组2</span><span class="token comment">//即抢占优先级范围：0~3，响应优先级范围：0~3</span><span class="token comment">//此分组配置在整个工程中仅需调用一次</span><span class="token comment">//若有多个中断，可以把此代码放在main函数内，while循环之前</span><span class="token comment">//若调用多次配置分组的代码，则后执行的配置会覆盖先执行的配置</span><span class="token comment">/*NVIC配置*/</span>NVIC_InitTypeDef NVIC_InitStructure<span class="token punctuation">;</span><span class="token comment">//定义结构体变量</span>NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> EXTI15_10_IRQn<span class="token punctuation">;</span><span class="token comment">//选择配置NVIC的EXTI15_10线</span>NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span><span class="token comment">//指定NVIC线路使能</span>NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelPreemptionPriority <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//指定NVIC线路的抢占优先级为1</span>NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelSubPriority <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//指定NVIC线路的响应优先级为1</span><span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将结构体变量交给NVIC_Init，配置NVIC外设</span><span class="token keyword">void</span> <span class="token function">EXTI15_10_IRQHandler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">EXTI_GetITStatus</span><span class="token punctuation">(</span>EXTI_Line14<span class="token punctuation">)</span> <span class="token operator">==</span> SET<span class="token punctuation">)</span><span class="token comment">//判断是否是外部中断14号线触发的中断</span><span class="token punctuation">&#123;</span><span class="token comment">/*如果出现数据乱跳的现象，可再次判断引脚电平，以避免抖动*/</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GPIO_ReadInputDataBit</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> GPIO_Pin_14<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>CountSensor_Count <span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//计数值自增一次</span><span class="token punctuation">&#125;</span><span class="token function">EXTI_ClearITPendingBit</span><span class="token punctuation">(</span>EXTI_Line14<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清除外部中断14号线的中断标志位</span><span class="token comment">//中断标志位必须清除</span><span class="token comment">//否则中断将连续不断地触发，导致主程序卡死</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-TIM"><a href="#2-3-TIM" class="headerlink" title="2.3 TIM"></a>2.3 TIM</h3><p>预分频器的工作的工作原理是，定时器时钟源每tick一次，<strong>预分频器计数器</strong>值+1，直到达到预分频器的设定值，然后再tick一次后计数器归零，同时，<strong>CNT计数器</strong>值+1。</p><p>由此可以看出，因为达到最大值后还要再tick一次才归零，所以定时器时钟频率应该为Fosc&#x2F;(PSC+ 1)。其中Fosc是定时器的时钟源。比如想对时钟源进行72分频，那么预分频器的值就应该设置为71。</p><p>由此可以看出，因为达到最大值后还要再tick一次才归零，所以定时器时钟频率应该为Fosc&#x2F;(PSC+ 1)。其中Fosc是定时器的时钟源。比如想对时钟源进行72分频，那么预分频器的值就应该设置为71。</p><p>预分频器值寄存器TIMx_PSC存在影子寄存器（官方翻译为缓冲功能），所以在定时器启动后更改TIMx_PSC的值并不会立即影响当前定时器的时钟频率。要等到下一个更新事件（UEV）发生时才会生效。比如下边这张图就体现了将分频系数由1修改为2（即TIMx_PSC由0更改为1）时整个定时器的时序图。</p><p><img src="C:\Users\Answerfour\AppData\Roaming\Typora\typora-user-images\image-20240324104734248.png" alt="image-20240324104734248"></p><p>更新事件（UEV）则由TIMx_CR1寄存器中的UDIS位控制，在启用时，会通过以下两种方式触发 ：</p><ul><li>计数器上溢</li><li>手动将 TIMx_EGR 寄存器中的UG 位置 1</li></ul><p><a href="https://zhuanlan.zhihu.com/p/82590576">STM32定时器（TIM）之预分频器（PSC）详解 - 知乎 (zhihu.com)</a></p><h4 id="2-3-1-定时中断"><a href="#2-3-1-定时中断" class="headerlink" title="2.3.1 定时中断"></a>2.3.1 定时中断</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*开启时钟*/</span><span class="token function">RCC_APB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB1Periph_TIM2<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开启TIM2的时钟</span><span class="token comment">/*配置时钟源*/</span><span class="token function">TIM_InternalClockConfig</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//选择TIM2为内部时钟，若不调用此函数，TIM默认也为内部时钟</span><span class="token comment">/*时基单元初始化*/</span>TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure<span class="token punctuation">;</span><span class="token comment">//定义结构体变量</span>TIM_TimeBaseInitStructure<span class="token punctuation">.</span>TIM_ClockDivision <span class="token operator">=</span> TIM_CKD_DIV1<span class="token punctuation">;</span><span class="token comment">//时钟分频，选择不分频，此参数用于配置滤波器时钟，不影响时基单元功能</span>TIM_TimeBaseInitStructure<span class="token punctuation">.</span>TIM_CounterMode <span class="token operator">=</span> TIM_CounterMode_Up<span class="token punctuation">;</span><span class="token comment">//计数器模式，选择向上计数</span>TIM_TimeBaseInitStructure<span class="token punctuation">.</span>TIM_Period <span class="token operator">=</span> <span class="token number">10000</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//计数周期，即ARR的值</span>TIM_TimeBaseInitStructure<span class="token punctuation">.</span>TIM_Prescaler <span class="token operator">=</span> <span class="token number">7200</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//预分频器，即PSC的值</span>TIM_TimeBaseInitStructure<span class="token punctuation">.</span>TIM_RepetitionCounter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//重复计数器，高级定时器才会用到</span><span class="token function">TIM_TimeBaseInit</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_TimeBaseInitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将结构体变量交给TIM_TimeBaseInit，配置TIM2的时基单元</span><span class="token comment">/*中断输出配置*/</span><span class="token function">TIM_ClearFlag</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span> TIM_FLAG_Update<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清除定时器更新标志位</span>                                                            <span class="token comment">//TIM_TimeBaseInit函数末尾，手动产生了更新事件</span>                                                            <span class="token comment">//若不清除此标志位，则开启中断后，会立刻进入一次中断</span>                                                            <span class="token comment">//如果不介意此问题，则不清除此标志位也可</span><span class="token function">TIM_ITConfig</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span> TIM_IT_Update<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开启TIM2的更新中断</span><span class="token comment">/*NVIC中断分组*/</span><span class="token function">NVIC_PriorityGroupConfig</span><span class="token punctuation">(</span>NVIC_PriorityGroup_2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//配置NVIC为分组2</span>                                               <span class="token comment">//即抢占优先级范围：0~3，响应优先级范围：0~3</span>                                               <span class="token comment">//此分组配置在整个工程中仅需调用一次</span>                                               <span class="token comment">//若有多个中断，可以把此代码放在main函数内，while循环之前</span>                                               <span class="token comment">//若调用多次配置分组的代码，则后执行的配置会覆盖先执行的配置</span><span class="token comment">/*NVIC配置*/</span>NVIC_InitTypeDef NVIC_InitStructure<span class="token punctuation">;</span><span class="token comment">//定义结构体变量</span>NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannel <span class="token operator">=</span> TIM2_IRQn<span class="token punctuation">;</span><span class="token comment">//选择配置NVIC的TIM2线</span>NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelCmd <span class="token operator">=</span> ENABLE<span class="token punctuation">;</span><span class="token comment">//指定NVIC线路使能</span>NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelPreemptionPriority <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//指定NVIC线路的抢占优先级为2</span>NVIC_InitStructure<span class="token punctuation">.</span>NVIC_IRQChannelSubPriority <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//指定NVIC线路的响应优先级为1</span><span class="token function">NVIC_Init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>NVIC_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将结构体变量交给NVIC_Init，配置NVIC外设</span><span class="token comment">/*TIM使能*/</span><span class="token function">TIM_Cmd</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使能TIM2，定时器开始运行</span><span class="token comment">/*定时器中断函数，可以复制到使用它的地方void TIM2_IRQHandler(void)&#123;if (TIM_GetITStatus(TIM2, TIM_IT_Update) == SET)&#123;        TIM_ClearITPendingBit(TIM2, TIM_IT_Update);&#125;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-2-外部时钟中断"><a href="#2-3-2-外部时钟中断" class="headerlink" title="2.3.2 外部时钟中断"></a>2.3.2 外部时钟中断</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*外部时钟配置*/</span><span class="token function">TIM_ETRClockMode2Config</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span> TIM_ExtTRGPSC_OFF<span class="token punctuation">,</span> TIM_ExtTRGPolarity_NonInverted<span class="token punctuation">,</span> <span class="token number">0x0F</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//选择外部时钟模式2，时钟从TIM_ETR引脚输入</span><span class="token comment">//注意TIM2的ETR引脚固定为PA0，无法随意更改</span><span class="token comment">//最后一个滤波器参数加到最大0x0F，可滤除时钟信号抖动</span><span class="token comment">/*时基单元初始化*/</span>TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure<span class="token punctuation">;</span><span class="token comment">//定义结构体变量</span>TIM_TimeBaseInitStructure<span class="token punctuation">.</span>TIM_ClockDivision <span class="token operator">=</span> TIM_CKD_DIV1<span class="token punctuation">;</span><span class="token comment">//时钟分频，选择不分频，此参数用于配置滤波器时钟，不影响时基单元功能</span>TIM_TimeBaseInitStructure<span class="token punctuation">.</span>TIM_CounterMode <span class="token operator">=</span> TIM_CounterMode_Up<span class="token punctuation">;</span><span class="token comment">//计数器模式，选择向上计数</span>TIM_TimeBaseInitStructure<span class="token punctuation">.</span>TIM_Period <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//计数周期，即ARR的值</span>TIM_TimeBaseInitStructure<span class="token punctuation">.</span>TIM_Prescaler <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//预分频器，即PSC的值</span>TIM_TimeBaseInitStructure<span class="token punctuation">.</span>TIM_RepetitionCounter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//重复计数器，高级定时器才会用到</span><span class="token function">TIM_TimeBaseInit</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_TimeBaseInitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将结构体变量交给TIM_TimeBaseInit，配置TIM2的时基单元</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-3-时钟输出比较"><a href="#2-3-3-时钟输出比较" class="headerlink" title="2.3.3 时钟输出比较"></a>2.3.3 时钟输出比较</h4><p>•PWM频率： Freq &#x3D; CK_PSC &#x2F; (PSC + 1) &#x2F; (ARR + 1)</p><p>•PWM占空比： Duty &#x3D; CCR &#x2F; (ARR + 1)</p><p>•PWM分辨率： Reso &#x3D; 1 &#x2F; (ARR + 1)</p><p><img src="C:\Users\Answerfour\AppData\Roaming\Typora\typora-user-images\image-20240324091032111.png" alt="image-20240324091032111"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*开启时钟*/</span><span class="token function">RCC_APB1PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB1Periph_TIM2<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开启TIM2的时钟</span><span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOA<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开启GPIOA的时钟</span><span class="token comment">/*GPIO重映射*/</span><span class="token comment">//RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);//开启AFIO的时钟，重映射必须先开启AFIO的时钟</span><span class="token comment">//GPIO_PinRemapConfig(GPIO_PartialRemap1_TIM2, ENABLE);//将TIM2的引脚部分重映射，具体的映射方案需查看参考手册</span><span class="token comment">//GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE);//将JTAG引脚失能，作为普通GPIO引脚使用</span><span class="token comment">/*GPIO初始化*/</span>GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_AF_PP<span class="token punctuation">;</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_0<span class="token punctuation">;</span><span class="token comment">//GPIO_Pin_15;</span>GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span><span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将PA0引脚初始化为复用推挽输出</span>                                                                <span class="token comment">//受外设控制的引脚，均需要配置为复用模式</span><span class="token comment">/*配置时钟源*/</span><span class="token function">TIM_InternalClockConfig</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//选择TIM2为内部时钟，若不调用此函数，TIM默认也为内部时钟</span><span class="token comment">/*时基单元初始化*/</span>TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure<span class="token punctuation">;</span><span class="token comment">//定义结构体变量</span>TIM_TimeBaseInitStructure<span class="token punctuation">.</span>TIM_ClockDivision <span class="token operator">=</span> TIM_CKD_DIV1<span class="token punctuation">;</span>     <span class="token comment">//时钟分频，选择不分频，此参数用于配置滤波器时钟，不影响时基单元功能</span>TIM_TimeBaseInitStructure<span class="token punctuation">.</span>TIM_CounterMode <span class="token operator">=</span> TIM_CounterMode_Up<span class="token punctuation">;</span> <span class="token comment">//计数器模式，选择向上计数</span>TIM_TimeBaseInitStructure<span class="token punctuation">.</span>TIM_Period <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//计数周期，即ARR的值</span>TIM_TimeBaseInitStructure<span class="token punctuation">.</span>TIM_Prescaler <span class="token operator">=</span> <span class="token number">720</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//预分频器，即PSC的值</span>TIM_TimeBaseInitStructure<span class="token punctuation">.</span>TIM_RepetitionCounter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment">//重复计数器，高级定时器才会用到</span><span class="token function">TIM_TimeBaseInit</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_TimeBaseInitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//将结构体变量交给TIM_TimeBaseInit，配置TIM2的时基单元</span><span class="token comment">/*输出比较初始化*/</span>TIM_OCInitTypeDef TIM_OCInitStructure<span class="token punctuation">;</span><span class="token comment">//定义结构体变量</span><span class="token function">TIM_OCStructInit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>TIM_OCInitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结构体初始化，若结构体没有完整赋值</span>                                        <span class="token comment">//则最好执行此函数，给结构体所有成员都赋一个默认值</span>                                        <span class="token comment">//避免结构体初值不确定的问题</span>TIM_OCInitStructure<span class="token punctuation">.</span>TIM_OCMode <span class="token operator">=</span> TIM_OCMode_PWM1<span class="token punctuation">;</span><span class="token comment">//输出比较模式，选择PWM模式1</span>TIM_OCInitStructure<span class="token punctuation">.</span>TIM_OCPolarity <span class="token operator">=</span> TIM_OCPolarity_High<span class="token punctuation">;</span><span class="token comment">//输出极性，选择为高，若选择极性为低，则输出高低电平取反</span>TIM_OCInitStructure<span class="token punctuation">.</span>TIM_OutputState <span class="token operator">=</span> TIM_OutputState_Enable<span class="token punctuation">;</span><span class="token comment">//输出使能</span>TIM_OCInitStructure<span class="token punctuation">.</span>TIM_Pulse <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//初始的CCR值</span><span class="token function">TIM_OC1Init</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_OCInitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将结构体变量交给TIM_OC1Init，配置TIM2的输出比较通道1</span><span class="token comment">/*TIM使能*/</span><span class="token function">TIM_Cmd</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使能TIM2，定时器开始运行</span><span class="token punctuation">&#125;</span><span class="token comment">/*** 函    数：PWM设置CCR* 参    数：Compare 要写入的CCR的值，范围：0~100* 返 回 值：无* 注意事项：CCR和ARR共同决定占空比，此函数仅设置CCR的值，并不直接是占空比*           占空比Duty = CCR / (ARR + 1)*/</span><span class="token keyword">void</span> <span class="token function">PWM_SetCompare1</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> Compare<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">TIM_SetCompare1</span><span class="token punctuation">(</span>TIM2<span class="token punctuation">,</span> Compare<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置CCR1的值</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-4-时钟输入捕获"><a href="#2-3-4-时钟输入捕获" class="headerlink" title="2.3.4 时钟输入捕获"></a>2.3.4 时钟输入捕获</h4><p>PWMI接占空比</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*输入捕获初始化*/</span>TIM_ICInitTypeDef TIM_ICInitStructure<span class="token punctuation">;</span><span class="token comment">//定义结构体变量</span>TIM_ICInitStructure<span class="token punctuation">.</span>TIM_Channel <span class="token operator">=</span> TIM_Channel_1<span class="token punctuation">;</span><span class="token comment">//选择配置定时器通道1</span>TIM_ICInitStructure<span class="token punctuation">.</span>TIM_ICFilter <span class="token operator">=</span> <span class="token number">0xF</span><span class="token punctuation">;</span><span class="token comment">//输入滤波器参数，可以过滤信号抖动</span>TIM_ICInitStructure<span class="token punctuation">.</span>TIM_ICPolarity <span class="token operator">=</span> TIM_ICPolarity_Rising<span class="token punctuation">;</span><span class="token comment">//极性，选择为上升沿触发捕获</span>TIM_ICInitStructure<span class="token punctuation">.</span>TIM_ICPrescaler <span class="token operator">=</span> TIM_ICPSC_DIV1<span class="token punctuation">;</span><span class="token comment">//捕获预分频，选择不分频，每次信号都触发捕获</span>TIM_ICInitStructure<span class="token punctuation">.</span>TIM_ICSelection <span class="token operator">=</span> TIM_ICSelection_DirectTI<span class="token punctuation">;</span><span class="token comment">//输入信号交叉，选择直通，不交叉</span><span class="token function">TIM_ICInit</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_ICInitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将结构体变量交给TIM_ICInit，配置TIM3的输入捕获通道</span><span class="token comment">/*选择触发源及从模式*/</span><span class="token function">TIM_SelectInputTrigger</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> TIM_TS_TI1FP1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//触发源选择TI1FP1</span><span class="token function">TIM_SelectSlaveMode</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> TIM_SlaveMode_Reset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从模式选择复位</span>                                                                <span class="token comment">//即TI1产生上升沿时，会触发CNT归零</span><span class="token function">TIM_PWMIConfig</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_ICInitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将结构体变量交给TIM_PWMIConfig，配置TIM3的输入捕获通道</span><span class="token comment">//此函数同时会把另一个通道配置为相反的配置，实现PWMI模式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编码器接口测速</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*输入捕获初始化*/</span>TIM_ICInitTypeDef TIM_ICInitStructure<span class="token punctuation">;</span><span class="token comment">//定义结构体变量</span><span class="token function">TIM_ICStructInit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>TIM_ICInitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结构体初始化，若结构体没有完整赋值</span><span class="token comment">//则最好执行此函数，给结构体所有成员都赋一个默认值</span><span class="token comment">//避免结构体初值不确定的问题</span>TIM_ICInitStructure<span class="token punctuation">.</span>TIM_Channel <span class="token operator">=</span> TIM_Channel_1<span class="token punctuation">;</span><span class="token comment">//选择配置定时器通道1</span>TIM_ICInitStructure<span class="token punctuation">.</span>TIM_ICFilter <span class="token operator">=</span> <span class="token number">0xF</span><span class="token punctuation">;</span><span class="token comment">//输入滤波器参数，可以过滤信号抖动</span><span class="token function">TIM_ICInit</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_ICInitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将结构体变量交给TIM_ICInit，配置TIM3的输入捕获通道</span>TIM_ICInitStructure<span class="token punctuation">.</span>TIM_Channel <span class="token operator">=</span> TIM_Channel_2<span class="token punctuation">;</span><span class="token comment">//选择配置定时器通道2</span>TIM_ICInitStructure<span class="token punctuation">.</span>TIM_ICFilter <span class="token operator">=</span> <span class="token number">0xF</span><span class="token punctuation">;</span><span class="token comment">//输入滤波器参数，可以过滤信号抖动</span><span class="token function">TIM_ICInit</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>TIM_ICInitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将结构体变量交给TIM_ICInit，配置TIM3的输入捕获通道</span><span class="token comment">/*编码器接口配置*/</span><span class="token function">TIM_EncoderInterfaceConfig</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> TIM_EncoderMode_TI12<span class="token punctuation">,</span> TIM_ICPolarity_Rising<span class="token punctuation">,</span> TIM_ICPolarity_Rising<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//配置编码器模式以及两个输入通道是否反相</span><span class="token comment">//注意此时参数的Rising和Falling已经不代表上升沿和下降沿了，而是代表是否反相</span><span class="token comment">//此函数必须在输入捕获初始化之后进行，否则输入捕获的配置会覆盖此函数的部分配置</span><span class="token comment">/*TIM使能*/</span><span class="token function">TIM_Cmd</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使能TIM3，定时器开始运行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-ADC"><a href="#2-3-ADC" class="headerlink" title="2.3 ADC"></a>2.3 ADC</h3><p>STM32F103C8T6 ADC资源：ADC1、ADC2，10个外部输入通道</p><h3 id="2-4-DMA"><a href="#2-4-DMA" class="headerlink" title="2.4 DMA"></a>2.4 DMA</h3><h3 id="2-5-USART"><a href="#2-5-USART" class="headerlink" title="2.5 USART"></a>2.5 USART</h3><h3 id="2-6-I2C"><a href="#2-6-I2C" class="headerlink" title="2.6 I2C"></a>2.6 I2C</h3><h3 id="2-7-SPI"><a href="#2-7-SPI" class="headerlink" title="2.7 SPI"></a>2.7 SPI</h3>]]></content>
      
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu Learning Notes</title>
      <link href="/2024/02/16/ubuntu-learning-notes/"/>
      <url>/2024/02/16/ubuntu-learning-notes/</url>
      
        <content type="html"><![CDATA[<blockquote><p>事情的起因是我按照教程运行搭载在JetsonNano上的ubuntu系统，发现系统无法连接wifi，于是查找资料试图解决。当我最后解决问题整理完这篇笔记之后我在脑海中构建了我的思考过程，发现解决这个问题其实也只需四到五步的推理，但是事实总是如此，为了这几步的解决步骤，我花了两个下午两个晚上，这么一想其实我的效率还可以更高点，下次我从早上开始学习思考，再遇到类似的未知领域的问题是不是一天就能想出来呢？我陷入了好奇之中。</p></blockquote><p>$$<br>\sum_{i&#x3D;0}^n i^2 &#x3D; \frac{(n^2+n)(2n+1)}{6}<br>$$</p><h3 id="1-网络拓扑结构的理解"><a href="#1-网络拓扑结构的理解" class="headerlink" title="1 网络拓扑结构的理解"></a>1 网络拓扑结构的理解</h3><h4 id="1-1-输入ifconfig，查看网络信息"><a href="#1-1-输入ifconfig，查看网络信息" class="headerlink" title="1.1 输入ifconfig，查看网络信息"></a>1.1 输入<code>ifconfig</code>，查看网络信息</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">eth0: <span class="token assign-left variable">flags</span><span class="token operator">=</span><span class="token number">416</span><span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>UP,BROADCAST,RUNNING,MULTICAST<span class="token operator">></span>  mtu <span class="token number">1500</span>        inet <span class="token number">192.168</span>.0.16  netmask <span class="token number">255.255</span>.255.0  broadcast <span class="token number">192.168</span>.0.255        inet6 fe80::4320:3860:46:8803  prefixlen <span class="token number">64</span>  scopeid 0x2<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>link<span class="token operator">></span>        ether <span class="token number">48</span>:b0:2d:5b:dc:56  txqueuelen <span class="token number">1000</span>  <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>        RX packets <span class="token number">18660</span>  bytes <span class="token number">1886816</span> <span class="token punctuation">(</span><span class="token number">1.8</span> MB<span class="token punctuation">)</span>        RX errors <span class="token number">0</span>  dropped <span class="token number">0</span>  overruns <span class="token number">0</span>  frame <span class="token number">0</span>        TX packets <span class="token number">20777</span>  bytes <span class="token number">6823167</span> <span class="token punctuation">(</span><span class="token number">6.8</span> MB<span class="token punctuation">)</span>        TX errors <span class="token number">0</span>  dropped <span class="token number">0</span> overruns <span class="token number">0</span>  carrier <span class="token number">0</span>  collisions <span class="token number">0</span>        device interrupt <span class="token number">150</span>  base 0xe000  lo: <span class="token assign-left variable">flags</span><span class="token operator">=</span><span class="token number">7</span><span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>UP,LOOPBACK,RUNNING<span class="token operator">></span>  mtu <span class="token number">65536</span>        inet <span class="token number">127.0</span>.0.1  netmask <span class="token number">255.0</span>.0.0        inet6 ::1  prefixlen <span class="token number">128</span>  scopeid 0x1<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>host<span class="token operator">></span>        loop  txqueuelen <span class="token number">1</span>  <span class="token punctuation">(</span>Local Loopback<span class="token punctuation">)</span>        RX packets <span class="token number">2505</span>  bytes <span class="token number">180228</span> <span class="token punctuation">(</span><span class="token number">180.2</span> KB<span class="token punctuation">)</span>        RX errors <span class="token number">0</span>  dropped <span class="token number">0</span>  overruns <span class="token number">0</span>  frame <span class="token number">0</span>        TX packets <span class="token number">2505</span>  bytes <span class="token number">180228</span> <span class="token punctuation">(</span><span class="token number">180.2</span> KB<span class="token punctuation">)</span>        TX errors <span class="token number">0</span>  dropped <span class="token number">0</span> overruns <span class="token number">0</span>  carrier <span class="token number">0</span>  collisions <span class="token number">0</span>rndis0: <span class="token assign-left variable">flags</span><span class="token operator">=</span><span class="token number">409</span><span class="token operator"><span class="token file-descriptor important">9</span>&lt;</span>UP,BROADCAST,MULTICAST<span class="token operator">></span>  mtu <span class="token number">1500</span>        ether 6a:64:62:35:cd:69  txqueuelen <span class="token number">1000</span>  <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>        RX packets <span class="token number">0</span>  bytes <span class="token number">0</span> <span class="token punctuation">(</span><span class="token number">0.0</span> B<span class="token punctuation">)</span>        RX errors <span class="token number">0</span>  dropped <span class="token number">0</span>  overruns <span class="token number">0</span>  frame <span class="token number">0</span>        TX packets <span class="token number">0</span>  bytes <span class="token number">0</span> <span class="token punctuation">(</span><span class="token number">0.0</span> B<span class="token punctuation">)</span>        TX errors <span class="token number">0</span>  dropped <span class="token number">0</span> overruns <span class="token number">0</span>  carrier <span class="token number">0</span>  collisions <span class="token number">0</span>usb0: <span class="token assign-left variable">flags</span><span class="token operator">=</span><span class="token number">409</span><span class="token operator"><span class="token file-descriptor important">9</span>&lt;</span>UP,BROADCAST,MULTICAST<span class="token operator">></span>  mtu <span class="token number">1500</span>        ether 6a:64:62:35:cd:6b  txqueuelen <span class="token number">1000</span>  <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>        RX packets <span class="token number">0</span>  bytes <span class="token number">0</span> <span class="token punctuation">(</span><span class="token number">0.0</span> B<span class="token punctuation">)</span>        RX errors <span class="token number">0</span>  dropped <span class="token number">0</span>  overruns <span class="token number">0</span>  frame <span class="token number">0</span>        TX packets <span class="token number">0</span>  bytes <span class="token number">0</span> <span class="token punctuation">(</span><span class="token number">0.0</span> B<span class="token punctuation">)</span>        TX errors <span class="token number">0</span>  dropped <span class="token number">0</span> overruns <span class="token number">0</span>  carrier <span class="token number">0</span>  collisions <span class="token number">0</span>wlan0: <span class="token assign-left variable">flags</span><span class="token operator">=</span><span class="token number">416</span><span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>UP,BROADCAST,RUNNING,MULTICAST<span class="token operator">></span>  mtu <span class="token number">1500</span>        inet <span class="token number">192.168</span>.9.1  netmask <span class="token number">255.255</span>.255.0  broadcast <span class="token number">192.168</span>.9.255        inet6 fe80::1acc:18ff:fe9b:24a4  prefixlen <span class="token number">64</span>  scopeid 0x2<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>link<span class="token operator">></span>        ether <span class="token number">18</span>:cc:18:9b:24:a4  txqueuelen <span class="token number">1000</span>  <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>        RX packets <span class="token number">0</span>  bytes <span class="token number">0</span> <span class="token punctuation">(</span><span class="token number">0.0</span> B<span class="token punctuation">)</span>        RX errors <span class="token number">0</span>  dropped <span class="token number">1</span>  overruns <span class="token number">0</span>  frame <span class="token number">0</span>        TX packets <span class="token number">315</span>  bytes <span class="token number">74205</span> <span class="token punctuation">(</span><span class="token number">74.2</span> KB<span class="token punctuation">)</span>        TX errors <span class="token number">0</span>  dropped <span class="token number">0</span> overruns <span class="token number">0</span>  carrier <span class="token number">0</span>  collisions <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-理解命令行的基本内容"><a href="#1-2-理解命令行的基本内容" class="headerlink" title="1.2 理解命令行的基本内容"></a>1.2 理解命令行的基本内容</h4><ol><li><p><code>lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</code></p><ul><li><p><code>lo</code>：网卡名称为 lo，代表本地回环接口。</p></li><li><p><code>flags=73&lt;UP,LOOPBACK,RUNNING&gt;</code>：表示该接口卡的状态标志，其中：</p><ul><li><code>UP</code>：接口卡已启用。</li><li><code>LOOPBACK</code>：接口卡为本地回环接口。</li><li><code>RUNNING</code>：接口卡正在运行。</li></ul></li><li><p><code>mtu 65536</code>：接口卡的最大传输单元 (MTU) 大小为 65536 字节。</p></li></ul></li><li><p><code>inet 127.0.0.1  netmask 255.0.0.0</code></p><ul><li><code>inet 127.0.0.1</code>：接口卡的 IPv4 地址为 127.0.0.1，它是本地回环地址，用于在本机内部进行通信。</li><li><code>netmask 255.0.0.0</code>：子网掩码为 255.0.0.0，表示回环地址的范围。</li></ul></li><li><p><code>inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</code></p><ul><li><code>inet6 ::1</code>：接口卡的 IPv6 地址为 ::1，它是本地回环地址的 IPv6 版本。</li><li><code>prefixlen 128</code>：IPv6 地址的前缀长度为 128。</li><li><code>scopeid 0x10&lt;host&gt;</code>：接口卡的作用域 ID，表示本地主机。</li></ul></li><li><p><code>loop  txqueuelen 1  (Local Loopback)</code></p><ul><li><code>loop</code>：接口类型为回环接口。</li><li><code>txqueuelen 1</code>：发送队列长度为 1。</li><li><code>(Local Loopback)</code>：本地回环接口。</li></ul></li><li><p><code>RX packets 2505  bytes 180228 (180.2 KB)</code></p><ul><li><code>RX packets 2505</code>：接收数据包的数量为 2505。</li><li><code>bytes 180228</code>：接收数据的字节数为 180228 字节（180.2 KB）。</li></ul></li><li><p><code>RX errors 0  dropped 0  overruns 0  frame 0</code></p><ul><li><code>RX errors 0</code>：接收错误的数量为 0。</li><li><code>dropped 0</code>：丢弃的接收数据包数量为 0。</li><li><code>overruns 0</code>：接收数据超出缓冲区的次数为 0。</li><li><code>frame 0</code>：帧错误的数量为 0。</li></ul></li><li><p><code>TX packets 2505  bytes 180228 (180.2 KB)</code></p><ul><li><code>TX packets 2505</code>：发送数据包的数量为 2505。</li><li><code>bytes 180228</code>：发送数据的字节数为 180228 字节（180.2 KB）。</li></ul></li><li><p><code>TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</code></p><ul><li><code>TX errors 0</code>：发送错误的数量为 0。</li><li><code>dropped 0</code>：丢弃的发送数据包数量为 0。</li><li><code>overruns 0</code>：发送数据超出缓冲区的次数为 0。</li><li><code>carrier 0</code>：载波错误的数量为 0。</li><li><code>collisions 0</code>：碰撞的数量为 0。</li></ul></li></ol><h3 id="2-检测是否有WIFI网络"><a href="#2-检测是否有WIFI网络" class="headerlink" title="2 检测是否有WIFI网络"></a>2 检测是否有WIFI网络</h3><p>输入<code>sudo nmcli devide wifi list</code>，检测是否有wifi信号，若无，优先检测硬件情况，查看网卡的插拔情况是否正常，若正常，排除硬件问题，进行下一步。</p><h3 id="3-排查软件方面的网络配置情况"><a href="#3-排查软件方面的网络配置情况" class="headerlink" title="3 排查软件方面的网络配置情况"></a>3 排查软件方面的网络配置情况</h3><ol><li><p><strong>检查无线适配器状态:</strong> 确保无线适配器已启用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> nmcli radio wifi on<span class="token comment">#sudo nmcli radio wifi off #关闭无线网络</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>刷新Network Manager:</strong> 刷新Network Manager以确保其了解当前网络状态</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> network-manager restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>验证无线配置:</strong> 仔细检查<code>wlan0</code>的无线配置。确保无线接口使用以下命令正确配置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> nmcli dev show wlan0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>扫描Wi-Fi网络:</strong> 手动触发Wi-Fi扫描</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> nmcli device wifi rescan<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>检查Wi-Fi网络列表:</strong> 扫描后，使用以下命令检查可用的Wi-Fi网络：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> nmcli device wifi list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>查看Network Manager日志:</strong> 检查Network Manager日志是否有错误或相关信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">journalctl <span class="token parameter variable">-xe</span> <span class="token operator">|</span> <span class="token function">grep</span> NetworkManager<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>更新Network Manager:</strong> 确保您的Network Manager 已更新至最新版本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>检查驱动程序问题:</strong> 验证无线适配器的驱动程序是否已安装并正常工作。</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> lshw <span class="token parameter variable">-C</span> network<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>一般来说假如前三步都没问题，第四步手动扫描wifi时出现报错，例<code>Error: Scanning not allowed while unavailable or activating.</code>这个错误表明在无线网络设备不可用或正在激活时，无法执行扫描操作。则缩小范围，检测设备是否正常启动。</p><h3 id="4-查看系统中的各种网络设备及其状态"><a href="#4-查看系统中的各种网络设备及其状态" class="headerlink" title="4 查看系统中的各种网络设备及其状态"></a>4 查看系统中的各种网络设备及其状态</h3><h4 id="4-1-输入nmcli-device，确保无线网络设备处于可用状态。"><a href="#4-1-输入nmcli-device，确保无线网络设备处于可用状态。" class="headerlink" title="4.1 输入nmcli device，确保无线网络设备处于可用状态。"></a>4.1 输入<code>nmcli device</code>，确保无线网络设备处于可用状态。</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">eth0    ethernet  connected  Wired connection <span class="token number">1</span>  <span class="token comment">#以太网设备，已连接，使用有线连接1。</span>l4tbr0  bridge    unmanaged  --  <span class="token comment">#桥接设备，未受 NetworkManager 管理。   </span>dummy0  dummy     unmanaged  --  <span class="token comment">#虚拟设备，未受 NetworkManager 管理。  </span>rndis0  ethernet  unmanaged  --  <span class="token comment">#以太网设备，未受 NetworkManager 管理。  </span>usb0    ethernet  unmanaged  --  <span class="token comment">#以太网设备，未受 NetworkManager 管理。  </span>lo      loopback  unmanaged  --  <span class="token comment">#回环设备（loopback），未受 NetworkManager 管理。</span>wlan0   wifi      unmanaged  --  <span class="token comment">#无线设备，未受 NetworkManager 管理。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据这些信息，<code>wlan0</code> 设备当前处于未受 NetworkManager 管理的状态，可能是由于之前在配置文件中指定了 <code>unmanaged-devices=interface-name:wlan0</code>。</p><h4 id="4-2-配置文件将-wlan0-设备纳入-NetworkManager-的管理"><a href="#4-2-配置文件将-wlan0-设备纳入-NetworkManager-的管理" class="headerlink" title="4.2 配置文件将 wlan0 设备纳入 NetworkManager 的管理"></a>4.2 配置文件将 <code>wlan0</code> 设备纳入 NetworkManager 的管理</h4><p>配置文件并删除或注释掉相关配置行以将 <code>wlan0</code> 设备纳入 NetworkManager 的管理，可以按照以下步骤进行操作：</p><ol><li><p>打开终端，并使用合适的文本编辑器（如 nano、vim 等）以管理员权限打开 NetworkManager 主配置文件。在大多数 Linux 发行版上，该文件位于 <code>/etc/NetworkManager/NetworkManager.conf</code>。</p><p>例如，在终端中输入以下命令打开文件：</p><pre class="line-numbers language-none"><code class="language-none">sudo vim &#x2F;etc&#x2F;NetworkManager&#x2F;NetworkManager.conf <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将managed&#x3D;false<br>改成managed&#x3D;true</p></li><li><p>在文本编辑器中，查找包含 <code>unmanaged-devices</code> 的行。该行可能类似于 <code>unmanaged-devices=interface-name:wlan0</code>。请注意，可能还有其他设备也被列为未受管理。</p></li><li><p>要删除这一行配置，请将其完全从文件中删除。要注释掉这一行，可以在行的开头添加一个井号 <code>#</code>。</p><p>示例：</p><pre class="line-numbers language-none"><code class="language-none"># unmanaged-devices&#x3D;interface-name:wlan0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>保存更改（在 nano 编辑器中按下 <code>Ctrl + O</code>，然后按下 <code>Enter</code>），然后关闭编辑器（在 nano 编辑器中按下 <code>Ctrl + X</code>）。</p></li><li><p>重新启动 NetworkManager 服务，以使更改生效。可以使用以下命令：</p><pre class="line-numbers language-none"><code class="language-none">sudo systemctl restart NetworkManager<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>显示当前系统中的网络连接配置信息，查看已连接的网络</p> <pre class="line-numbers language-none"><code class="language-none">nmcli connection show <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="5-解决系统每次重启都会重置配置文件"><a href="#5-解决系统每次重启都会重置配置文件" class="headerlink" title="5 解决系统每次重启都会重置配置文件"></a>5 解决系统每次重启都会重置配置文件</h3><p>系统在重启后自动生成了 <code>unmanaged-devices=interface-name:wlan0</code> 这段语句，可能是因为 NetworkManager 在重启时读取了默认的配置文件，并将之前的更改覆盖掉了。</p><p>为了解决这个问题，你可以尝试以下方法：</p><ol><li><p>创建一个 NetworkManager 配置文件片段：创建一个新的配置文件片段，其中包含你希望保留的配置项。在这个片段中，删除或注释掉 <code>unmanaged-devices=interface-name:wlan0</code> 这一行。例如，你可以创建一个名为 <code>/etc/NetworkManager/conf.d/99-custom.conf</code> 的文件。</p><p>使用以下命令创建并编辑配置文件片段：</p><pre class="line-numbers language-none"><code class="language-none">复制代码sudo nano &#x2F;etc&#x2F;NetworkManager&#x2F;conf.d&#x2F;99-custom.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在编辑器中添加以下内容：</p><pre class="line-numbers language-none"><code class="language-none">复制代码[keyfile]unmanaged-devices&#x3D;none<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>保存更改（在 nano 编辑器中按下 <code>Ctrl + O</code>，然后按下 <code>Enter</code>），然后关闭编辑器（在 nano 编辑器中按下 <code>Ctrl + X</code>）。</p></li><li><p>重新启动 NetworkManager 服务：</p><pre class="line-numbers language-none"><code class="language-none">复制代码sudo systemctl restart NetworkManager<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>这样，当 NetworkManager 重启时，它将读取新的配置文件片段，并应该不再生成 <code>unmanaged-devices=interface-name:wlan0</code> 这段语句。</p><p>注意：确保新创建的配置文件片段位于 <code>/etc/NetworkManager/conf.d/</code> 目录中，这样 NetworkManager 在读取配置时会包含这个目录下的所有配置文件。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/02/05/hello-world/"/>
      <url>/2024/02/05/hello-world/</url>
      
        <content type="html"><![CDATA[<h3 id="The-idea-was-initially-conceived"><a href="#The-idea-was-initially-conceived" class="headerlink" title="The idea was initially conceived."></a>The idea was initially conceived.</h3><blockquote><p>事情起源于一个小小的念头。但这并不是一时念起。起初是因为遗憾吧，我的收藏夹里收藏了很多技术，但是我一直都只是在外面观望驻足，备考研究生考试的这一年，我几乎忘记了所有的编程技巧，我对技术的热爱因为现实的自欺而一直停留在过去，直到现在我才敢说我以及走出来了，形而上学上的自我纠结让我好一段时间开始反思自己，这个问题对内上，它解释为自我的发展上限和在社会竞争关系上的意识对待问题，对内上则表现为存在主义上的迷茫，所幸书籍给了我答案，我就像加缪书里的西西弗，想通之前我推石上山，想通之后我还是推石，只不过上不上山无所谓了。</p></blockquote><p>个人博客的第一次搭建是我大一时候的事情了，那个时候我匆匆交了一份问卷上去，现在我终于能好好地再把这张试卷再做一篇。借此顺便记录一下我这几天的学习笔记吧。</p><h3 id="1-安装Nodejs-git，搭建github仓库"><a href="#1-安装Nodejs-git，搭建github仓库" class="headerlink" title="1 安装Nodejs&#x2F;git，搭建github仓库"></a>1 安装Nodejs&#x2F;git，搭建github仓库</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> <span class="token parameter variable">-v</span><span class="token comment">#查看node版本</span><span class="token function">npm</span> <span class="token parameter variable">-v</span><span class="token comment">#查看npm版本</span><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> cnpm <span class="token parameter variable">--registry</span><span class="token operator">=</span>http://registry.npm.taobao.org<span class="token comment">#安装淘宝的cnpm 管理器</span>cnpm <span class="token parameter variable">-v</span><span class="token comment">#查看cnpm版本</span>cnpm <span class="token function">install</span> <span class="token parameter variable">-g</span> hexo-cli    <span class="token comment">#安装hexo框架</span>hexo <span class="token parameter variable">-v</span><span class="token comment">#查看hexo版本</span><span class="token function">mkdir</span> blog<span class="token comment">#创建blog目录</span><span class="token builtin class-name">cd</span> blog <span class="token comment">#进入blog目录</span><span class="token function">sudo</span> hexo init <span class="token comment">#生成博客 初始化博客</span>hexo s<span class="token comment">#启动本地博客服务</span>http://localhost:4000/<span class="token comment">#本地访问地址</span>hexo n <span class="token string">"我的第一篇文章"</span> <span class="token comment">#创建新的文章 </span><span class="token comment">#Github创建一个新的仓库 YourGithubName.github.io</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-检测4000端口是否被占用"><a href="#2-检测4000端口是否被占用" class="headerlink" title="2 检测4000端口是否被占用"></a>2 检测4000端口是否被占用</h3><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">netstat -ano #列出所有端口的使用情况 #列出计算机上所有端口的使用情况，包括TCP和UDP端口，以及这些端口对应的进程ID（PID）。-a 参数表示显示所有连接和侦听端口，-n 参数表示以数字形式显示地址和端口号，-o 参数显示拥有的进程ID。netstat -aon|findstr &quot;4000&quot; #查看被占用端口对应的 PIDtasklist|findstr &quot;30806&quot; #查看指定 PID 的进程taskkill &#x2F;T &#x2F;F &#x2F;PID 30806  #结束进程#强制（&#x2F;F参数）杀死 pid 为 9088 的所有进程包括子进程（&#x2F;T参数）   #之后我们就可以结束掉这个进程，这样我们就可以释放该端口来使用了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-配置-config-yml"><a href="#3-配置-config-yml" class="headerlink" title="3 配置_config.yml"></a>3 配置_config.yml</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Deployment</span><span class="token comment">## Docs: https://hexo.io/docs/one-command-deployment</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">'git'</span>   <span class="token key atrule">repo</span><span class="token punctuation">:</span> <span class="token string">'https://github.com/Answerfour/Answerfour.github.io.git'</span> <span class="token comment">#个人仓库名</span>  <span class="token key atrule">branch</span><span class="token punctuation">:</span> <span class="token string">'master'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-部署仓库"><a href="#4-部署仓库" class="headerlink" title="4 部署仓库"></a>4 部署仓库</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cnpm <span class="token function">install</span> <span class="token parameter variable">--save</span> hexo-deployer-git <span class="token comment">#在blog目录下安装git部署插件</span>hexo d<span class="token comment">#部署到Github仓库里</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5-修改主题"><a href="#5-修改主题" class="headerlink" title="5 修改主题"></a>5 修改主题</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/litten/hexo-theme-yilia.git themes/yilia  <span class="token comment">#下载yilia主题到本地</span><span class="token comment">#修改hexo根目录下的 _config.yml 文件 ： theme: yilia</span>hexo c<span class="token comment">#清理一下</span>hexo g<span class="token comment">#生成</span>hexo d<span class="token comment">#部署到远程Github仓库</span>https://YourGithubName.github.io/  <span class="token comment">#查看博客</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
